<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flexiston&#39;s Blog</title>
  <icon>https://blog.flesx.cn/images/favicon.ico</icon>
  <subtitle>立即行动吧，未来要自己争取</subtitle>
  <link href="https://blog.flesx.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.flesx.cn/"/>
  <updated>2020-09-13T07:29:38.000Z</updated>
  <id>https://blog.flesx.cn/</id>
  
  <author>
    <name>Flexiston</name>
    <email>flexiston@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图床的千层套路</title>
    <link href="https://blog.flesx.cn/posts/27708.html"/>
    <id>https://blog.flesx.cn/posts/27708.html</id>
    <published>2020-09-13T07:29:38.000Z</published>
    <updated>2020-09-13T07:29:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>本文转载自 <a href="https://blog.cyfan.top/"><strong>陈YFの博客(￣▽￣)&quot;</strong> </a></p><p>原文链接：<a href="https://blog.cyfan.top/2020/09/12/hey-picbed/">https://blog.cyfan.top/2020/09/12/hey-picbed/</a></p></div></blockquote><p>2020年8月9日<a href="https://github.com/jsdelivr/jsdelivr/pull/18247/files">Jsdelivr发布了一次使用政策：Create Acceptable Use Policy</a>，其中第4条Prohibited Use引起了众多议论：</p><!-- more --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">4. Prohibited Use</span><br><span class="line"></span><br><span class="line">The following behavior is prohibited:</span><br><span class="line"></span><br><span class="line"> 1. Hosting or accessing content that:</span><br><span class="line">     - contains malware or harmful code in any form,</span><br><span class="line">     - violates proprietary rights of others,</span><br><span class="line">     - is sexually explicit,</span><br><span class="line">     - is potentially illegal in the EU or the USA.</span><br><span class="line"></span><br><span class="line"> 2. Abusing the service and its resources, or using jsDelivr as a general-purpose</span><br><span class="line">    file or media hosting service. This includes, for example:</span><br><span class="line">     - running an image hosting website and using jsDelivr as a storage for all</span><br><span class="line">       uploaded images,</span><br><span class="line">     - hosting videos, file backups, or other files in large quantities.</span><br><span class="line"></span><br><span class="line">    We recognize that there are legitimate projects that consist of a large number</span><br><span class="line">    of files, and these are not considered abuse. For example: icons packs, apps,</span><br><span class="line">    or games with a large number of assets.</span><br></pre></td></tr></table></figure><p>其中<code>running an image hosting website and using jsDelivr as a storage for all uploaded images</code> 这一句相当的有歧义，要多少的图片才能算是图站？博客里面图片放里面算吗？上传的图片怎样才不行？<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/TlAGjm6IvJSMVpq.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/TlAGjm6IvJSMVpq.jpg" alt="img"></a></p><p>反观网上流传的白嫖Github做图床，基本点进去都是<code>https://cdn.jsdelivr.net/gh/</code> 这样子的图床，这种行为，我不敢妄加评论。但是，jsdelivr诞生的意义似乎并不是为了图床而生的，这种行为也很难判断成滥用。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896ece29a8e0.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896ece29a8e0.jpg" alt="img"></a></p><p>使用政策发布之后，一时间，QQ群、v2ex、知乎上立刻就炸了锅。很多人猜测jsdelivr是不是滥用过度而禁止将其作为图床？免费图床的白嫖日子要结束了吗？更多的人，是在哭诉和询问那里还有像jsd一样优秀的<strong>图床</strong>可以白嫖，微博炸了，那里还有免费图床啊？</p><p>实际上，我一般采用的是<code>BackBlaze+CloudFlare</code> 但是自从八月底移动开始改道，从原先优秀的CMI绕路LAX后，国内CloudFlare访问质量再次暴跌，这不得不使我将博客迁至Vercel。好在八月份我有幸申请到了<code>doegdoge图床</code>使用权限，获得了国内较高速的图床.</p><p>但是，对于哪些没有没有图床的人来说，免费图床真的这么难以获得吗？</p><p>不好意思，<strong>免费图床非常多</strong>，只是你不会用而已，这篇文章，就是拯救面前陷入图床危机的你【当然是面向小白，大佬也可以在底下给我提意见鸭】。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_56.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_56.png" alt="img"></a></p><h2 id="公益图床">公益图床</h2><h3 id="sm-ms"><a href="http://sm.ms">sm.ms</a></h3><p><a href="https://sm.ms/">https://sm.ms</a></p><p>推荐程度：★</p><p>首先推荐的是这个图床，loli.net域名经典重现。三年前此图床域名还有备案采用的是国内CDN，可惜后来因为滥用吊销备案号而被迫迁移国外，用的是CloudFlare。实际使用效果面向国内确实不太好，建议备用。</p><p>你不需要注册，拖拽直接上传，只要不违反大陆和香港法律，他就能永久保留你的图片</p><p><a href="https://i.loli.net/2020/09/12/OxvnMBwd3VA8uyD.jpg"><img src="https://i.loli.net/2020/09/12/OxvnMBwd3VA8uyD.jpg" alt="img"></a></p><p>可搭配PicGo</p><h3 id="Imgur">Imgur</h3><p><a href="https://imgur.com/">https://imgur.com</a></p><p>推荐程度：★★</p><p>国外一家牛逼的图片托管服务商，你可以选择注册或不注册，同样的，拖拽上传，永久保留，其SLA有着相当高的保证。</p><p>然而很可惜的是，这种网站很早就在国内被<strong>DNS域名污染</strong>，也就意味着访客无法正常加载你的图片。这也就是被打为两颗星的原因。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%B8%8D%E8%AF%B4%E8%AF%9D.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%B8%8D%E8%AF%B4%E8%AF%9D.png" alt="img"></a></p><p>当然，你也可以通过<a href="#%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1">#图片缓存服务</a> 从而实现国内访问。</p><p>可搭配PicGo【需注册】</p><h3 id="去不图床">去不图床</h3><p><a href="https://7bu.top/">https://7bu.top/</a></p><p>推荐程度：★★★★</p><p>由<a href="https://dusays.com/241/">杜老师</a>提供的个人公益图床，存储于阿里和腾讯的COS，官方保证SLA&gt;=99%，是一个不错的选择，当然，7bu毕竟是个人维护的图床，能不能永久撑下去还是个问题，我也没有做过深度评测，无法表明其可用性。</p><p>可搭配PicGo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口地址：https:&#x2F;&#x2F;7bu.top&#x2F;api&#x2F;upload</span><br><span class="line">post参数：image</span><br><span class="line">回调json：data.url</span><br></pre></td></tr></table></figure><p><a href="https://7bu.top/index/api.html">更准确的API文档</a></p><p><a href="https://7.dusays.com/2020/09/13/aa555748a9f38.jpg"><img src="https://7.dusays.com/2020/09/13/aa555748a9f38.jpg" alt="img"></a></p><blockquote><p><s>而且，就在我上传测试图片的时候，明明已经表明图片已经上传，打开却发现COS提示404，这一点我不得陷入思考，个人维持的公益项目真的能保证SLA吗？<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%BE%BF%E4%BE%BF.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/%E4%BE%BF%E4%BE%BF.png" alt="img"></a></s></p></blockquote><blockquote><p>昨天上传的时候撞上服务器维修了，很抱歉做出了不够恰当的评价.7bu采用的是全国腾讯云CDN加速，国内访问速度十分优良。然而请注意，7bu刚开始建立的目的并不是面向全球【仅面对中国大陆游客】，这导致其大陆以外基本解析至国内西藏腾讯，访问效果并不好。并且，这是通过腾讯云的鉴黄，可能会存在误杀行为。具体使用请个人斟酌【不过作为开发环境还是可行的】。</p></blockquote><h2 id="白嫖的">白嫖的</h2><h3 id="阿里图床">阿里图床</h3><p>推荐程度：★★★★</p><p>我个人搭建的API：<a href="https://picbed.cyfan.top/">https://picbed.cyfan.top</a> 不保证上传SLA<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53ce897ab55.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53ce897ab55.jpg" alt="img"></a></p><p>由于小鸡联通国内网络不太好，很有可能无法正常上传，<a href="https://github.com/ChenYFan-Tester/Alibaba_pic">原项目已经开源</a> ，你完全可以通过在国内的机子或者是本地搭建以获得更佳体验。</p><p>如果上传成功了，图片将会托管于阿里云的CDN，无论是速度还是延迟都相当的优秀。</p><p>官方大厂，下载SLA有保障。</p><p>可搭配PicGo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口地址：https:&#x2F;&#x2F;picbed.cyfan.top&#x2F;update.php</span><br><span class="line">post参数：file</span><br><span class="line">回调json：data.url</span><br></pre></td></tr></table></figure><h3 id="DogeDoge图床">DogeDoge图床</h3><p>推荐程度：★★★★★</p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912192303.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912192303.jpg" alt="TEST"></a></p><p>其实很早就看到<a href="https://v2ex.com/t/659652">V2EX的那篇征文了</a>：</p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912190301.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912190301.png?q=45" alt="img"></a></p><p>可是当时我不够优秀啊虽然现在同样不优秀，博客也没满一年啊，于是白嫖的心态搁浅了。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896e8a408253.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5896e8a408253.jpg" alt="img"></a></p><p>后来突然看到<a href="https://blog.jalenchuh.cn/">Jalen的博客</a>也用了DogeDoge图床，这才突然意识到原来我已经满一年了。于是抱着试试看的心态向doge官方邮箱发送了邮件，结果真过了。。。</p><p>dogedoge拥有着国内相当不错的CDN，国内访问飞快，但是国外的访问质量的确不如人意。【反正此博客面向中国大陆】</p><p>而且，DogeDoge拥有着很良心的处理参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">w：宽</span><br><span class="line">h：高</span><br><span class="line">mode：模式 - crop 裁剪、clip 缩略</span><br><span class="line">fmt：格式 - jpg、png、webp（原图为 gif，且没有 frame 参数时，不做任何裁切、缩略处理）</span><br><span class="line">frame：1 - EOF帧，默认为 1 （对动画有效）</span><br><span class="line">q：压缩质量 - 1 - 100（默认 90 ）</span><br><span class="line">rect：指定位置裁剪 - top,left,w,h（若与 w &#x2F; h 参数同时存在，则 会在 rect 裁剪过后，继续按照 w &#x2F; h 的要求缩略）</span><br><span class="line">pos：（配合 w &#x2F; h ）裁剪位置 - top-left、top、top-right、left、center、right、bottom-left、bottom、bottom-right，默认为center</span><br><span class="line">pos 还有一个特殊的值 auto，该值目前为 alpha 状态，可以根据图片重点来进行 pos 的位置取舍。</span><br></pre></td></tr></table></figure><p>当然，DogeDoge也可以搭配PicGo使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口地址：https:&#x2F;&#x2F;www.dogedoge.com&#x2F;tools&#x2F;upload&#x2F;&#123;Your_Token&#125;</span><br><span class="line">post参数：file</span><br><span class="line">回调json：data.o_url</span><br></pre></td></tr></table></figure><p>当然，现在的Doge图床还是处于免费的试用期【Creater】，不过好在试用期过后价格也比较合理，一般的tester也足够使用，目前看来SLA还是不错的。</p><p>当然，申请不到dogedoge图床也没关系，看下去你就会发现，白嫖的路千千万万，何必执着于一条。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_34.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_34.png" alt="img"></a></p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205753.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205753.png?q=45" alt="img"></a></p><h3 id="BackBlaze">BackBlaze</h3><p>推荐程度：★★★</p><p>具体可以看看<a href="https://blog.cyfan.top/2020/07/09/free-10GB-oss-poweredby-backblaze/">这篇文章</a></p><h2 id="千奇百怪的">千奇百怪的</h2><h3 id="Github-JSDelivr">Github+JSDelivr</h3><p>正如我所说的，这种组合已经被广大博主所采纳，并且网上教程已经泛滥了，在这里不再阐述。</p><h3 id="npm-JSDelivr-Zhimg-bdstatic-自定义镜像">npm+JSDelivr&amp;&amp;Zhimg&amp;&amp;bdstatic&amp;&amp;自定义镜像</h3><p>推荐程度：★★★★★</p><p>为什么很多文章都没有提到用npm做图床？我想其中很大的原因是，白嫖jsd做图床的，很多都是小白【或者不愿花时间在于此的大佬】，同样的，这些文章面向的都是这些人，毕竟，以拖拽方式上传的Github和命令行方式上传，我想，大都数人会选择前者吧。</p><p>可是，你们没有想到的是，github文件镜像【github.com.cnpmjs.org是站点镜像】只有jsd一个，npm镜像可远远不止这一个啊！</p><p>让我们看看分别镜像在jsd、zhimg、bdstatic的文件怎么样：</p><p><a href="https://cdn.jsdelivr.net/npm/chenyfan-oss@0.0.1/1.jpg"><img src="https://cdn.jsdelivr.net/npm/chenyfan-oss@0.0.1/1.jpg" alt="img"></a></p><p><a href="https://unpkg.zhimg.com/chenyfan-oss@0.0.1/2.jpg"><img src="https://unpkg.zhimg.com/chenyfan-oss@0.0.1/2.jpg" alt="img"></a></p><p><a href="https://code.bdstatic.com/npm/chenyfan-oss@0.0.1/3.jpg"><img src="https://code.bdstatic.com/npm/chenyfan-oss@0.0.1/3.jpg" alt="img"></a></p><p>【unpkg镜像用的是CloudFlare，国内加速效果不好，暂时不写】</p><p>jsd就不必多说了，国内拥有强劲的网宿节点支撑【虽然以前出现过网宿下游投毒】，速度丝滑无比，国外也有强劲的CloudFlare上岗，可谓国内外两不误。而且，jsd对于npm的package单文件没有大小限制，也就是说泡个视频也不是问题。</p><p>zhimg是知乎的unpkg镜像，也是一个不错的选择【阿里CDN】，知乎官方也未对此做出限制，日常使用是可以的。</p><p>bdstatic是百度的内用npm镜像，速度也很好【百度CDN】，但是请注意，bdstatic作为内用cdn，其拉取频率较慢，经常出现无法及时更新。</p><p>啊哈？不会上传？<br><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_31.png"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/stick_31.png" alt="img"></a>去<a href="https://npmjs.org/">npm</a><br>官网注册个账号去,然后先：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>接着：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>请注意，如果你之前用过淘宝镜像，那么请先手动切回源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org</span><br></pre></td></tr></table></figure><p>每一次发布图片后，你可以将原来的图片删除，更改<code>package.json</code> 版本号【向上增加】,然后<code>npm publish</code>即可</p><p>这个似乎可以搭配picgo，不过好像没这个插件，写起来也麻烦。。。</p><p>unpkg的国内镜像其实远远不止这些，包括七牛、饿了么、腾讯都有，不过这个就要自己找了。<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/7DgSoyqwtYBxchE.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/7DgSoyqwtYBxchE.jpg" alt="img"></a></p><p>一些推荐的npm【or unpkg镜像】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;</span><br><span class="line">【知乎出品，阿里国内节点】https:&#x2F;&#x2F;unpkg.zhimg.com&#x2F;</span><br><span class="line">【百度出品，网宿国内节点】https:&#x2F;&#x2F;code.bdstatic.com&#x2F;npm&#x2F;</span><br><span class="line">【饿了么出品，网宿国内节点】https:&#x2F;&#x2F;shadow.elemecdn.com&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><p>或者说，你还可以自建unpkg镜像。</p><p>啊，你说你没有服务器反向代理unpkg？</p><p>其实，七牛的对象存储，腾讯的COS和阿里的OSS都是支持镜像回源的鸭！</p><p>七牛http流量每月免费10GB，腾讯的国内免费60GB6个月，作为自用完全足够了！</p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/L6LVJL_1ZUM2ISQ%5D10R%7B3HF.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/L6LVJL_1ZUM2ISQ%5D10R%7B3HF.png?q=45" alt="img"></a></p><h3 id="ipfs">ipfs</h3><p>我曾经<a href="https://blog.cyfan.top/2020/04/07/IPFS-CloudFlare-ServerLessWebPage/">写过关于ipfs的讲解</a> ,作为一个去中心化的存储系统拿来做公开图床其实挺不错的。</p><p>我个人搭建的ipfs镜像【托管于CloudFlareWorkers】：<a href="https://ipfs.cyfan.top/">https://ipfs.cyfan.top</a> <a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53d78c3f4a5.jpg"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53d78c3f4a5.jpg" alt="img"></a></p><p>我个人搭建的ipfs上传API：<a href="https://ipfsupload.cyfan.top/">https://ipfsupload.cyfan.top</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口地址：https:&#x2F;&#x2F;ipfsupload.cyfan.top&#x2F;api&#x2F;v0&#x2F;add?pin&#x3D;true</span><br><span class="line">post参数：file</span><br><span class="line">回调json：Hash</span><br></pre></td></tr></table></figure><blockquote><p>此处Hash获得的是文件的Qmhash，你还要依托ipfs镜像，如https://ipfs.cyfan.top/ipfs/{QmHash}</p></blockquote><p><a href="https://ipfs.cyfan.top/ipfs/QmctXmCyxkN72nzoHMAgw1geR7u9XvK7sLo72W4bDZsCm2"><img src="https://ipfs.cyfan.top/ipfs/QmctXmCyxkN72nzoHMAgw1geR7u9XvK7sLo72W4bDZsCm2" alt="img"></a></p><p>顺便收录一些ipfs网关【可访问】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【北京 阿里云】https:&#x2F;&#x2F;hashnews.k1ic.com&#x2F;</span><br><span class="line">【香港 阿里云】https:&#x2F;&#x2F;ipfs.jbb.one&#x2F;</span><br><span class="line">【美国 DigitalOcean】https:&#x2F;&#x2F;ipfs.telos.miami&#x2F;</span><br><span class="line">【Amazon】https:&#x2F;&#x2F;ipfs.oceanprotocol.com&#x2F;</span><br></pre></td></tr></table></figure><p>你可以在https://ipfs.github.io/public-gateway-checker/找到更多</p><h2 id="图片缓存服务">图片缓存服务</h2><p>正如<a href="#Imgur">#Imgur</a>所说的，imgur在国内已经无法访问了，但是，图片缓存服务可以啊！</p><p><a href="https://search.pstatic.net/common/?src=https://i.imgur.com/Usdr0IT.jpg"><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/Usdr0IT.jpg" alt="img"></a></p><p>收集了一些图片缓存服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【国内网宿节点，只能加载特定图床图片如imgur】https:&#x2F;&#x2F;search.pstatic.net&#x2F;common&#x2F;?src&#x3D;</span><br><span class="line">【Akamai节点，没有使用限制】https:&#x2F;&#x2F;imageproxy.pimg.tw&#x2F;resize?url&#x3D;</span><br><span class="line">【CloudFlare节点】https:&#x2F;&#x2F;images.weserv.nl&#x2F;?url&#x3D;</span><br><span class="line">【CloudFlare节点】https:&#x2F;&#x2F;pic1.xuehuaimg.com&#x2F;proxy&#x2F;</span><br></pre></td></tr></table></figure><h2 id="PicGo的搭配使用">PicGo的搭配使用</h2><p>PicGo默认已经集成了部分图床，其拖拽上传、自动复制剪贴板实在赢得了无数人的心。但是，对于一些冷门的图床支持似乎就不太好，这时候你需要用自定义web图床实现这一切：</p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205225.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205225.png?q=45" alt="img"></a></p><p>我在上方介绍的图床如果支持web端上传，基本上就会写一个post请求，你可以依葫芦画瓢填写进去</p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205449.png?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912205449.png?q=45" alt="img"></a></p><p>这样子你就可以实现较为丝滑的上传图片了：</p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210009.jpg?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210009.jpg?q=45" alt="img"></a></p><p><a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210420.gif?q=45"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/20200912210420.gif?q=45" alt="img"></a></p><p>【为了压缩方便删除了部分帧】</p><h2 id="后言">后言</h2><p>实际上最保险的莫过于使用各大厂商的对象存储，当然这笔钱不大好使。<br>你也可以用自己的VPS搭建Chevereto，当然前提是你有VPS<a href="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53de1a4d14d.gif"><img src="https://rmt.dogedoge.com/fetch/hi-c-oss/storage/5c53de1a4d14d.gif" alt="img"></a></p>]]></content>
    
    
    <summary type="html">&gt; 本文转载自 [**陈YFの博客(￣▽￣)&quot;** ](https://blog.cyfan.top/)

2020年8月9日Jsdelivr发布了一次使用政策：Create Acceptable Use Policy，其中第4条Prohibited Use引起了众多议论...
</summary>
    
    
    
    <category term="白嫖" scheme="https://blog.flesx.cn/categories/%E7%99%BD%E5%AB%96/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/tags/Hexo/"/>
    
    <category term="图床" scheme="https://blog.flesx.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="PicGo" scheme="https://blog.flesx.cn/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions自动部署Hexo博客+Gulp压缩</title>
    <link href="https://blog.flesx.cn/posts/17931.html"/>
    <id>https://blog.flesx.cn/posts/17931.html</id>
    <published>2020-08-20T13:51:01.000Z</published>
    <updated>2020-09-05T09:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Hexo 有个缺点，因为是使用 Node.js 编写的，如果文件多的话，生成、部署不可避免地会非常慢</p><p>解决办法 —— 使用自动部署，用自动部署就可以不用等缓慢的生成、部署啦 <s>（懒人必备哟）</s></p><p>GitHub Actions 相对其他自动部署来说，第一，GitHub旗下的，肯定是很好的啦</p><p>第二，可以直接在 GitHub 源代码仓库里配置，很方便，不用像 Travis CI 那样需要注册个账号配置也比较麻烦（个人观点）</p><p>当然也有缺点</p><p>私有仓库运行时间限制（除非是 Pro 账户）</p><p>Gulp 压缩就不用说了，我是觉得非常好用</p><h2 id="开始">开始</h2><p>这就开始吧！</p><h3 id="新建-GitHub-仓库">新建 GitHub 仓库</h3><p><strong>如果已有博客源文件仓库，跳到 <code>步骤 3</code></strong></p><p>首先，到 GitHub 新建一个用来放博客源文件的仓库</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-newrepo.png" alt="新建仓库"></p><p>不想暴露隐私就选私有仓库</p><h4 id="公共仓库">公共仓库</h4><p>也可以用公共仓库，使用 sed 命令替换内容</p><p>比如我的 <code>_config.yml</code> 文件中的百度推送 Token</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">blog.JalenChuh.cn</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">baiduToken</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span></span><br></pre></td></tr></table></figure><p>那么我们可以使用 <code>.TOKEN</code> 将 token 代替</p><p>而之后在编写的 Action 的时候将 token 存入仓库设置里的 secrets，用 sed 命令把 .TOKEN 替换就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/.TOKEN/<span class="variable">$&#123;baiduToken&#125;</span>/&quot;</span> _config.yml</span><br></pre></td></tr></table></figure><p>sed -i 的用法为 sed -i 's/原字符串/新字符串/' 文件路径</p><p>结合 secrets 在 Actions 里使用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">baiduToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.baiduToken</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">run:</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/.TOKEN/$&#123;baiduToken&#125;/&quot;</span> <span class="string">_config.yml</span></span><br></pre></td></tr></table></figure><p>这样就建好仓库了</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-reposuccess.png" alt="建好仓库"></p><h3 id="推送仓库">推送仓库</h3><p>先把主题目录下 .git 文件夹（隐藏文件夹）删掉，不然会报 Warning，上传上去主题目录会是空的</p><p>或者用 submodule（高级操作了）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add 主题GitHub仓库地址 themes/主题文件夹名</span><br></pre></td></tr></table></figure><p>用 submodule 会直接从主题 GitHub 仓库获取主题文件，所以如果有魔改就不会生效（也可以 Fork 主题仓库再魔改，然后 <code>submodule add 你Fork的地址</code>）</p><p><s>（都是走过的坑啊😂）</s></p><p>然后在博客根目录运行以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin 你的仓库地址.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-push.png" alt="推送成功"></p><p>这样就把你的博客推送上去了</p><h3 id="生成-Token">生成 Token</h3><p>进入 GitHub，点击右上角头像，点击 Settings</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-settings.png" alt="点击设置"></p><p>点击 Developer settings</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-devsettings.png" alt="Developer settings"></p><p>点左边 Personal access tokens，然后点上面的 Generate new token</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-token.png" alt="生成Token"></p><p>然后 Note 写备注，下面勾上 <code>repo</code>，获取所有仓库权限</p><p>生成好了</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-tokensuccess.png" alt="生成好了"></p><p>注意这个 Token 只会显示一次，所以要保存好 <s>弄丢了还能再生成啊，对不对🙄</s></p><h3 id="配置-config-yml">配置 _config.yml</h3><p>找到 <code>deploy</code> 字段，把它改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://你的GitHub用户名:生成的Token@github.com/你的GitHub用户名/仓库名.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="配置-GitHub-Actions">配置 GitHub Actions</h3><p>重点来了！！</p><p>在博客根目录新建 <code>.github</code> 文件夹（别忘了那个 <code>.</code>）</p><p>里面再新建一个 <code>workflows</code> 文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ga-workflows.png" alt="新建文件夹"></p><p>在里面新建一个 <code>yml</code> 格式的文件，名字随便起</p><p>（也可以直接在博客仓库里配置）</p><p>里面写 GitHub Actions 的配置内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># 部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># 触发条件</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># 推送到 master 分支</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span> <span class="comment"># 推送新版本号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># Checkout 仓库</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span> <span class="comment"># 安装 Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span> <span class="comment"># 安装 Hexo；更改时区</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Modules</span> <span class="comment"># 缓存 Node 插件</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache-modules</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span> <span class="comment"># 如果没有缓存或 插件有更新，则安装插件</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache-modules.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json**</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="comment"># 生成</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># 部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">博客静态文件仓库地址</span> <span class="string">.deploy_git</span> <span class="comment"># clone 静态文件仓库，防止 Hexo 推送时覆盖整个静态文件仓库，只推送有更改的文件</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>（诶？VS Code 好像支持编写 GitHub Actions，有字段提示）</p><h2 id="Gulp">Gulp</h2><p>全局安装 gulp-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-cli -g</span><br></pre></td></tr></table></figure><p>在博客根目录安装 Gulp 所需依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp @babel/core @babel/preset-env gulp-autoprefixer gulp-babel gulp-clean-css gulp-cssnano gulp-htmlclean gulp-htmlmin gulp-uglify --save-dev</span><br></pre></td></tr></table></figure><p>在博客<strong>根目录</strong>新建一个 <code>gulpfile.js</code>，复制粘贴以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cssClean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlMin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlClean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;gulp-autoprefixer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">&#x27;gulp-cssnano&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlMinify</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .pipe(htmlClean())</span><br><span class="line">        .pipe(htmlMin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">            collapseBooleanAttributes: <span class="literal">true</span>,</span><br><span class="line">            removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">            removeScriptTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">            removeStyleLinkTypeAttributes: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsMinify</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify().on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssMinify</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .pipe(cssClean(&#123;</span><br><span class="line">            compatibility: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(cssnano(&#123;</span><br><span class="line">            reduceIdents: <span class="literal">false</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(autoprefixer())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = gulp.parallel( <span class="comment">// 异步压缩</span></span><br><span class="line">    cssMinify,</span><br><span class="line">    htmlMinify,</span><br><span class="line">    jsMinify</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>本地运行 <code>gulp</code> 测试一下，确定没有报错了就可以了</p><p>然后 Github Actions 的配置项加上命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-cli -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><p><strong>完整的 Github Actions 配置文件如下：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># 部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># 触发条件</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># 推送到 master 分支</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span> <span class="comment"># 推送新版本号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># Checkout 仓库</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span> <span class="comment"># 安装 Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span> <span class="comment"># 安装 Hexo；更改时区</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">gulp-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Modules</span> <span class="comment"># 缓存 Node 插件</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache-modules</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span> <span class="comment"># 如果没有缓存或 插件有更新，则安装插件</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache-modules.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json**</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="comment"># 生成</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># 部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">博客静态文件仓库地址</span> <span class="string">.deploy_git</span> <span class="comment"># clone 静态文件仓库，防止 Hexo 推送时覆盖整个静态文件仓库，只推送有更改的文件</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>然后再次运行 <code>git add .</code> <code>git commit -m &quot;xxx&quot;</code> <code>git push</code> 推送上去看看有没有报错，有报错基本都是没配置好</p><h2 id="结束">结束</h2><p>其实很简单的</p><p>（好像写完了吧，如果有遗漏啥的欢迎评论补充呀）</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>封面图来自：<a href="https://blog.jalenchuh.cn/posts/use-github-action/">https://blog.jalenchuh.cn/posts/use-github-action/</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">Hexo有个缺点，文章多，生成、部署就会非常慢，使用自动部署就不用等啦（懒人必备）。Gulp 压缩就不用说了，我是觉得非常好用</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="GitHub" scheme="https://blog.flesx.cn/categories/GitHub/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="GitHub Actions" scheme="https://blog.flesx.cn/tags/GitHub-Actions/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>UptimeRobot免费网站存活监控</title>
    <link href="https://blog.flesx.cn/posts/47424.html"/>
    <id>https://blog.flesx.cn/posts/47424.html</id>
    <published>2020-08-20T01:58:09.000Z</published>
    <updated>2020-08-20T01:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>对于静态托管网站来说，如果你放在不同的仓库，或者是托管服务商，那么有一个必要的网站存活监控是非常重要的，实时监控哪个仓库存活，哪个仓库无法访问，以便及时调整自己的线路。</p><p>UptimeRobot是一个免费提供网站存活监控的服务商，免费版本可以同时监控50个站点，最高频率可以达到5分钟一次，而且还可以自己生成公共页面以便访问，还可以绑定自定义域名。</p><h2 id="正文">正文</h2><p>网站地址：<a href="https://uptimerobot.com/">https://uptimerobot.com/</a></p><p>注册什么的就不用说了吧</p><h2 id="创建监视器">创建监视器</h2><p>注册完成之后登录会直接进入控制台</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820104637.png" alt=""></p><p>创建新的监视器</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820104721.png" alt=""></p><p>选择你要监视的方式，<code>http(s)</code> 是通过访问的形式，<code>ping</code> 就是ping你的地址，<code>port</code> 就是监视端口</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820105159.jpg" alt=""></p><p>这就创建好一个监视器啦</p><h2 id="生成公共页面">生成公共页面</h2><p>我们要访问监视器总不能每次都登录吧，UptimeRobot贴心的准备了可以生成公共页面，还可以绑定自定义域名哦</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820105358.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820105432.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820105544.png" alt=""></p><p>选择要显示的监视器，是全部显示还是只显示选中</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820105833.png" alt=""></p><p>创建完成之后就可以使用你的自定义域名来访问啦，或者使用默认域名</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820105936.png" alt=""></p><p>在这里进行访问</p><p>这里是我的例子：<a href="https://status.flesx.cn/">Flexistonの网站监控</a></p><h2 id="API">API</h2><p>如果你不喜欢他生成的页面，或者想要自己部署，那么你可以使用我 Fork 别人制作的主题，地址：</p><ul><li><a href="https://github.com/Flexiston/uptime-status">https://github.com/Flexiston/uptime-status</a></li></ul><p>Fork 到自己仓库后，修改相关配置即可</p><p><img src="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200820110242.png" alt=""></p><p>支持 Monitor-Specific 和 Read-Only 两种 Api Key，自己按照需要任选其一生成即可，在配置文件中进行修改，之后自己部署完毕就OK啦</p><p>例子：<a href="https://status.flesx.cn">Flexistonの网站监控</a> | <a href="https://status.dabailuobo.com/">大白萝卜の网站监控</a> | <a href="https://status.zykjofficial.top/">卓越科技- 的网站状态</a></p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>本文转载自<a href="https://blog.dabailuobo.com">大白萝卜のBlog</a>，有改动</p><p>原文链接：<a href="https://blog.dabailuobo.com/ba779920/">https://blog.dabailuobo.com/ba779920/</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">对于静态托管网站来说，如果你放在不同的仓库，或者是托管服务商，那么有一个必要的网站存活监控是非常重要的，实时监控哪个仓库存活，哪个仓库无法访问，以便及时调整自己的线路。</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="工具" scheme="https://blog.flesx.cn/categories/Dev/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="网站存活监控" scheme="https://blog.flesx.cn/tags/%E7%BD%91%E7%AB%99%E5%AD%98%E6%B4%BB%E7%9B%91%E6%8E%A7/"/>
    
    <category term="UptimeRobot" scheme="https://blog.flesx.cn/tags/UptimeRobot/"/>
    
  </entry>
  
  <entry>
    <title>使用Vercel加速Hexo博客</title>
    <link href="https://blog.flesx.cn/posts/43359.html"/>
    <id>https://blog.flesx.cn/posts/43359.html</id>
    <published>2020-08-09T08:51:01.000Z</published>
    <updated>2020-08-10T23:51:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>有没有发现我博客加载很快呀，我就是用 Vercel 部署的（还有 Coding，多线路，主要用的是 Vercel）</p><p>当然 Vercel 也有缺点，只有电信线路加载很快，移动联通嘛，就......你懂的。</p><p>解决方法就是多线路，多线路部署教程看 <a href="https://colsrch.top/posts/56951997/">Colsrch的博客</a></p><p>好了，开始。</p><h2 id="Vercel">Vercel</h2><h3 id="注册账号">注册账号</h3><p>进入 <a href="https://vercel.com">Vercel官网</a>，点击右上角 Sign Up，点击 Continue with GitHub，授权登录</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-signup.png" alt="注册"></p><h3 id="新建项目">新建项目</h3><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-import.png" alt="引入项目"></p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-importrepo.png" alt="填写项目地址"></p><p>这里填写 <strong>静态文件</strong> 的仓库，就是Hexo生成出来的网页文件仓库</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-accessaccount.png" alt="检查账号"></p><p>如果引入的是你的仓库，就选 Yes</p><p>如果是引入别人的，就选 No，Vercel 会把这个仓库复制到你自己的账号里面</p><p>这里我选 Yes</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-install.png" alt="安装Vercel"></p><p>在你的账号里安装 Vercel，通过这个，你的仓库如果有更新，就会自动获取更新并部署</p><p>建议选 All repositories，以后如果还要用 Vercel 部署网站就不用再次安装，当然可以自己选的</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-importroot.png" alt="选根目录"></p><p>这里就不要动它，直接 Continue（我这用的是个测试仓库哈）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-config.png" alt="配置仓库"></p><p>这个是配置新建的项目，项目名可以改一改（新建成功后项目名就不能改了）</p><p>下面的是自动部署用的，有很多 Bug，建议别用</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-cloning.png" alt="部署中..."></p><p>等它部署好就可以了</p><h3 id="自定义域名">自定义域名</h3><p>进入项目 Overview，点击 View Domains</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-domains.png" alt="自定义域名"></p><p>在输入框里填写你的域名</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-domain.png" alt="自定义域名"></p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@master/post/ver-arecord.png" alt="添加A记录"></p><p>按照提示，到域名控制台添加DNS记录就可以了</p><h3 id="Vercel-End">Vercel End</h3><p>OK，Vercel 已经弄好了，下面来弄自动部署（如果嫌麻烦可以不用弄啦）</p><blockquote class="blockquote-note blockquote-note__important"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></div>补充</div><div class="blockquote-note__content"><p>经 <strong>@ChenYFan</strong> 补充：</p><blockquote><p>Vercel 其实是能直接部署 Hexo 站点的，不需要用 GitHub Actions 或者 Travis-ci<br>在 build 命令里写上以下代码：<br><code>npm i hexo-cli &amp;&amp; npm i &amp;&amp; hexo g</code><br>然后输出使用 pubilc 文件夹即可</p></blockquote><p><strong>注：Vercel 需要引入博客源文件仓库</strong></p></div></blockquote><h2 id="GitHub-Actions">GitHub Actions</h2><p>GitHub Actions部分参见</p><h2 id="结束">结束</h2><p>如果有遗漏啥欢迎评论区补充呀</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">有没有发现我博客加载很快呀，我就是用Vercel部署的</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="GitHub" scheme="https://blog.flesx.cn/categories/GitHub/"/>
    
    <category term="Vercel" scheme="https://blog.flesx.cn/categories/Dev/Vercel/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="GitHub Actions" scheme="https://blog.flesx.cn/tags/GitHub-Actions/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/tags/Hexo/"/>
    
    <category term="Vercel" scheme="https://blog.flesx.cn/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>Hexo生成、部署的时候打印炫酷的文字</title>
    <link href="https://blog.flesx.cn/posts/32716.html"/>
    <id>https://blog.flesx.cn/posts/32716.html</id>
    <published>2020-08-07T13:39:44.000Z</published>
    <updated>2020-08-07T13:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章教你怎么在运行Hexo命令的时候打印出炫酷的文字 <s>明明就是水文章</s></p><p>效果：﻿﻿﻿</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/preview.png" alt="效果"></p><h2 id="开始">开始</h2><p>首先，到 <a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 生成文字（我选的是 big 字体）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/generate.png" alt="生成"></p><p>然后在博客 <strong>根目录</strong> 的 <code>scripts</code> 文件夹（如果没有就手动创建啦）里面创建一个 <code>js</code> 文件（随便起名字）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/js.png" alt="创建js文件"></p><p>里面内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; version &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../themes/&#123;theme&#125;/package.json&#x27;</span>) </span><br><span class="line">hexo.on(<span class="string">&#x27;ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    hexo.log.info(<span class="string">`</span></span><br><span class="line"><span class="string">=========================================</span></span><br><span class="line"><span class="string"> ______ _           _     _              </span></span><br><span class="line"><span class="string">|  ____| |         (_)   | |             </span></span><br><span class="line"><span class="string">| |__  | | _____  ___ ___| |_ ___  _ __  </span></span><br><span class="line"><span class="string">|  __| | |/ _ \\ \\/ / / __| __/ _ \\| &#x27;_ \\ </span></span><br><span class="line"><span class="string">| |    | |  __/&gt;  &lt;| \\__ \\ |\\ (_) | | | |</span></span><br><span class="line"><span class="string">|_|    |_|\\___/_/\\_\\_|___/\\__\\___/|_| |_|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;theme&#125; v<span class="subst">$&#123;version&#125;</span></span></span><br><span class="line"><span class="string">=========================================</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>hexo.log.info</code> 里的内容改为你生成的（注意特殊字符需要转义），<code>&#123;theme&#125;</code> 改为你用的主题</p><p>然后就好啦</p><h2 id="结束">结束</h2><p>就是一篇水文啦~</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">Hexo生成、部署的时候打印出炫酷的文字（一篇水文）</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="炫酷文字" scheme="https://blog.flesx.cn/tags/%E7%82%AB%E9%85%B7%E6%96%87%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Emoji速查表</title>
    <link href="https://blog.flesx.cn/posts/39479.html"/>
    <id>https://blog.flesx.cn/posts/39479.html</id>
    <published>2020-07-14T09:44:09.000Z</published>
    <updated>2020-07-14T09:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>看到 <a href="https://jalenchuh.cn/">@Jalen</a> 的博客仓库 Commit 的时候前面有个 Emoji，我也打算要加 Emoji 😄<br>﻿﻿﻿</p><h3 id="People">People</h3><table><thead><tr><th>:bowtie: <code>:bowtie:</code></th><th>😄 <code>:smile:</code></th><th>😆 <code>:laughing:</code></th></tr></thead><tbody><tr><td>😊 <code>:blush:</code></td><td>😃 <code>:smiley:</code></td><td>☺️ <code>:relaxed:</code></td></tr><tr><td>😏 <code>:smirk:</code></td><td>😍 <code>:heart_eyes:</code></td><td>😘 <code>:kissing_heart:</code></td></tr><tr><td>😚 <code>:kissing_closed_eyes:</code></td><td>😳 <code>:flushed:</code></td><td>😌 <code>:relieved:</code></td></tr><tr><td>😆 <code>:satisfied:</code></td><td>😁 <code>:grin:</code></td><td>😉 <code>:wink:</code></td></tr><tr><td>😜 <code>:stuck_out_tongue_winking_eye:</code></td><td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td><td>😀 <code>:grinning:</code></td></tr><tr><td>😗 <code>:kissing:</code></td><td>😙 <code>:kissing_smiling_eyes:</code></td><td>😛 <code>:stuck_out_tongue:</code></td></tr><tr><td>😴 <code>:sleeping:</code></td><td>😟 <code>:worried:</code></td><td>😦 <code>:frowning:</code></td></tr><tr><td>😧 <code>:anguished:</code></td><td>😮 <code>:open_mouth:</code></td><td>😬 <code>:grimacing:</code></td></tr><tr><td>😕 <code>:confused:</code></td><td>😯 <code>:hushed:</code></td><td>😑 <code>:expressionless:</code></td></tr><tr><td>😒 <code>:unamused:</code></td><td>😅 <code>:sweat_smile:</code></td><td>😓 <code>:sweat:</code></td></tr><tr><td>😥 <code>:disappointed_relieved:</code></td><td>😩 <code>:weary:</code></td><td>😔 <code>:pensive:</code></td></tr><tr><td>😞 <code>:disappointed:</code></td><td>😖 <code>:confounded:</code></td><td>😨 <code>:fearful:</code></td></tr><tr><td>😰 <code>:cold_sweat:</code></td><td>😣 <code>:persevere:</code></td><td>😢 <code>:cry:</code></td></tr><tr><td>😭 <code>:sob:</code></td><td>😂 <code>:joy:</code></td><td>😲 <code>:astonished:</code></td></tr><tr><td>😱 <code>:scream:</code></td><td>:neckbeard: <code>:neckbeard:</code></td><td>😫 <code>:tired_face:</code></td></tr><tr><td>😠 <code>:angry:</code></td><td>😡 <code>:rage:</code></td><td>😤 <code>:triumph:</code></td></tr><tr><td>😪 <code>:sleepy:</code></td><td>😋 <code>:yum:</code></td><td>😷 <code>:mask:</code></td></tr><tr><td>😎 <code>:sunglasses:</code></td><td>😵 <code>:dizzy_face:</code></td><td>👿 <code>:imp:</code></td></tr><tr><td>😈 <code>:smiling_imp:</code></td><td>😐 <code>:neutral_face:</code></td><td>😶 <code>:no_mouth:</code></td></tr><tr><td>😇 <code>:innocent:</code></td><td>👽 <code>:alien:</code></td><td>💛 <code>:yellow_heart:</code></td></tr><tr><td>💙 <code>:blue_heart:</code></td><td>💜 <code>:purple_heart:</code></td><td>❤️ <code>:heart:</code></td></tr><tr><td>💚 <code>:green_heart:</code></td><td>💔 <code>:broken_heart:</code></td><td>💓 <code>:heartbeat:</code></td></tr><tr><td>💗 <code>:heartpulse:</code></td><td>💕 <code>:two_hearts:</code></td><td>💞 <code>:revolving_hearts:</code></td></tr><tr><td>💘 <code>:cupid:</code></td><td>💖 <code>:sparkling_heart:</code></td><td>✨ <code>:sparkles:</code></td></tr><tr><td>⭐️ <code>:star:</code></td><td>🌟 <code>:star2:</code></td><td>💫 <code>:dizzy:</code></td></tr><tr><td>💥 <code>:boom:</code></td><td>💥 <code>:collision:</code></td><td>💢 <code>:anger:</code></td></tr><tr><td>❗️ <code>:exclamation:</code></td><td>❓ <code>:question:</code></td><td>❕ <code>:grey_exclamation:</code></td></tr><tr><td>❔ <code>:grey_question:</code></td><td>💤 <code>:zzz:</code></td><td>💨 <code>:dash:</code></td></tr><tr><td>💦 <code>:sweat_drops:</code></td><td>🎶 <code>:notes:</code></td><td>🎵 <code>:musical_note:</code></td></tr><tr><td>🔥 <code>:fire:</code></td><td>💩 <code>:hankey:</code></td><td>💩 <code>:poop:</code></td></tr><tr><td>💩 <code>:shit:</code></td><td>👍 <code>:+1:</code></td><td>👍 <code>:thumbsup:</code></td></tr><tr><td>👎 <code>:-1:</code></td><td>👎 <code>:thumbsdown:</code></td><td>👌 <code>:ok_hand:</code></td></tr><tr><td>👊 <code>:punch:</code></td><td>👊 <code>:facepunch:</code></td><td>✊ <code>:fist:</code></td></tr><tr><td>✌️ <code>:v:</code></td><td>👋 <code>:wave:</code></td><td>✋ <code>:hand:</code></td></tr><tr><td>✋ <code>:raised_hand:</code></td><td>👐 <code>:open_hands:</code></td><td>☝️ <code>:point_up:</code></td></tr><tr><td>👇 <code>:point_down:</code></td><td>👈 <code>:point_left:</code></td><td>👉 <code>:point_right:</code></td></tr><tr><td>🙌 <code>:raised_hands:</code></td><td>🙏 <code>:pray:</code></td><td>👆 <code>:point_up_2:</code></td></tr><tr><td>👏 <code>:clap:</code></td><td>💪 <code>:muscle:</code></td><td>🤘 <code>:metal:</code></td></tr><tr><td>🖕 <code>:fu:</code></td><td>🚶 <code>:walking:</code></td><td>🏃 <code>:runner:</code></td></tr><tr><td>🏃 <code>:running:</code></td><td>👫 <code>:couple:</code></td><td>👪 <code>:family:</code></td></tr><tr><td>👬 <code>:two_men_holding_hands:</code></td><td>👭 <code>:two_women_holding_hands:</code></td><td>💃 <code>:dancer:</code></td></tr><tr><td>👯 <code>:dancers:</code></td><td>🙆 <code>:ok_woman:</code></td><td>🙅 <code>:no_good:</code></td></tr><tr><td>💁 <code>:information_desk_person:</code></td><td>🙋 <code>:raising_hand:</code></td><td>👰 <code>:bride_with_veil:</code></td></tr><tr><td>🙎 <code>:person_with_pouting_face:</code></td><td>🙍 <code>:person_frowning:</code></td><td>🙇 <code>:bow:</code></td></tr><tr><td>:couplekiss: <code>:couplekiss:</code></td><td>💑 <code>:couple_with_heart:</code></td><td>💆 <code>:massage:</code></td></tr><tr><td>💇 <code>:haircut:</code></td><td>💅 <code>:nail_care:</code></td><td>👦 <code>:boy:</code></td></tr><tr><td>👧 <code>:girl:</code></td><td>👩 <code>:woman:</code></td><td>👨 <code>:man:</code></td></tr><tr><td>👶 <code>:baby:</code></td><td>👵 <code>:older_woman:</code></td><td>👴 <code>:older_man:</code></td></tr><tr><td>👱 <code>:person_with_blond_hair:</code></td><td>👲 <code>:man_with_gua_pi_mao:</code></td><td>👳 <code>:man_with_turban:</code></td></tr><tr><td>👷 <code>:construction_worker:</code></td><td>👮 <code>:cop:</code></td><td>👼 <code>:angel:</code></td></tr><tr><td>👸 <code>:princess:</code></td><td>😺 <code>:smiley_cat:</code></td><td>😸 <code>:smile_cat:</code></td></tr><tr><td>😻 <code>:heart_eyes_cat:</code></td><td>😽 <code>:kissing_cat:</code></td><td>😼 <code>:smirk_cat:</code></td></tr><tr><td>🙀 <code>:scream_cat:</code></td><td>😿 <code>:crying_cat_face:</code></td><td>😹 <code>:joy_cat:</code></td></tr><tr><td>😾 <code>:pouting_cat:</code></td><td>👹 <code>:japanese_ogre:</code></td><td>👺 <code>:japanese_goblin:</code></td></tr><tr><td>🙈 <code>:see_no_evil:</code></td><td>🙉 <code>:hear_no_evil:</code></td><td>🙊 <code>:speak_no_evil:</code></td></tr><tr><td>💂 <code>:guardsman:</code></td><td>💀 <code>:skull:</code></td><td>🐾 <code>:feet:</code></td></tr><tr><td>👄 <code>:lips:</code></td><td>💋 <code>:kiss:</code></td><td>💧 <code>:droplet:</code></td></tr><tr><td>👂 <code>:ear:</code></td><td>👀 <code>:eyes:</code></td><td>👃 <code>:nose:</code></td></tr><tr><td>👅 <code>:tongue:</code></td><td>💌 <code>:love_letter:</code></td><td>👤 <code>:bust_in_silhouette:</code></td></tr><tr><td>👥 <code>:busts_in_silhouette:</code></td><td>💬 <code>:speech_balloon:</code></td><td>💭 <code>:thought_balloon:</code></td></tr><tr><td>:feelsgood: <code>:feelsgood:</code></td><td>:finnadie: <code>:finnadie:</code></td><td>:goberserk: <code>:goberserk:</code></td></tr><tr><td>:godmode: <code>:godmode:</code></td><td>:hurtrealbad: <code>:hurtrealbad:</code></td><td>:rage1: <code>:rage1:</code></td></tr><tr><td>:rage2: <code>:rage2:</code></td><td>:rage3: <code>:rage3:</code></td><td>:rage4: <code>:rage4:</code></td></tr><tr><td>:suspect: <code>:suspect:</code></td><td>:trollface: <code>:trollface:</code></td><td></td></tr></tbody></table><h3 id="Nature">Nature</h3><table><thead><tr><th>☀️ <code>:sunny:</code></th><th>☔️ <code>:umbrella:</code></th><th>☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td>❄️ <code>:snowflake:</code></td><td>⛄️ <code>:snowman:</code></td><td>⚡️ <code>:zap:</code></td></tr><tr><td>🌀 <code>:cyclone:</code></td><td>🌁 <code>:foggy:</code></td><td>🌊 <code>:ocean:</code></td></tr><tr><td>🐱 <code>:cat:</code></td><td>🐶 <code>:dog:</code></td><td>🐭 <code>:mouse:</code></td></tr><tr><td>🐹 <code>:hamster:</code></td><td>🐰 <code>:rabbit:</code></td><td>🐺 <code>:wolf:</code></td></tr><tr><td>🐸 <code>:frog:</code></td><td>🐯 <code>:tiger:</code></td><td>🐨 <code>:koala:</code></td></tr><tr><td>🐻 <code>:bear:</code></td><td>🐷 <code>:pig:</code></td><td>🐽 <code>:pig_nose:</code></td></tr><tr><td>🐮 <code>:cow:</code></td><td>🐗 <code>:boar:</code></td><td>🐵 <code>:monkey_face:</code></td></tr><tr><td>🐒 <code>:monkey:</code></td><td>🐴 <code>:horse:</code></td><td>🐎 <code>:racehorse:</code></td></tr><tr><td>🐫 <code>:camel:</code></td><td>🐑 <code>:sheep:</code></td><td>🐘 <code>:elephant:</code></td></tr><tr><td>🐼 <code>:panda_face:</code></td><td>🐍 <code>:snake:</code></td><td>🐦 <code>:bird:</code></td></tr><tr><td>🐤 <code>:baby_chick:</code></td><td>🐥 <code>:hatched_chick:</code></td><td>🐣 <code>:hatching_chick:</code></td></tr><tr><td>🐔 <code>:chicken:</code></td><td>🐧 <code>:penguin:</code></td><td>🐢 <code>:turtle:</code></td></tr><tr><td>🐛 <code>:bug:</code></td><td>🐝 <code>:honeybee:</code></td><td>🐜 <code>:ant:</code></td></tr><tr><td>🐞 <code>:beetle:</code></td><td>🐌 <code>:snail:</code></td><td>🐙 <code>:octopus:</code></td></tr><tr><td>🐠 <code>:tropical_fish:</code></td><td>🐟 <code>:fish:</code></td><td>🐳 <code>:whale:</code></td></tr><tr><td>🐋 <code>:whale2:</code></td><td>🐬 <code>:dolphin:</code></td><td>🐄 <code>:cow2:</code></td></tr><tr><td>🐏 <code>:ram:</code></td><td>🐀 <code>:rat:</code></td><td>🐃 <code>:water_buffalo:</code></td></tr><tr><td>🐅 <code>:tiger2:</code></td><td>🐇 <code>:rabbit2:</code></td><td>🐉 <code>:dragon:</code></td></tr><tr><td>🐐 <code>:goat:</code></td><td>🐓 <code>:rooster:</code></td><td>🐕 <code>:dog2:</code></td></tr><tr><td>🐖 <code>:pig2:</code></td><td>🐁 <code>:mouse2:</code></td><td>🐂 <code>:ox:</code></td></tr><tr><td>🐲 <code>:dragon_face:</code></td><td>🐡 <code>:blowfish:</code></td><td>🐊 <code>:crocodile:</code></td></tr><tr><td>🐪 <code>:dromedary_camel:</code></td><td>🐆 <code>:leopard:</code></td><td>🐈 <code>:cat2:</code></td></tr><tr><td>🐩 <code>:poodle:</code></td><td>🐾 <code>:paw_prints:</code></td><td>💐 <code>:bouquet:</code></td></tr><tr><td>🌸 <code>:cherry_blossom:</code></td><td>🌷 <code>:tulip:</code></td><td>🍀 <code>:four_leaf_clover:</code></td></tr><tr><td>🌹 <code>:rose:</code></td><td>🌻 <code>:sunflower:</code></td><td>🌺 <code>:hibiscus:</code></td></tr><tr><td>🍁 <code>:maple_leaf:</code></td><td>🍃 <code>:leaves:</code></td><td>🍂 <code>:fallen_leaf:</code></td></tr><tr><td>🌿 <code>:herb:</code></td><td>🍄 <code>:mushroom:</code></td><td>🌵 <code>:cactus:</code></td></tr><tr><td>🌴 <code>:palm_tree:</code></td><td>🌲 <code>:evergreen_tree:</code></td><td>🌳 <code>:deciduous_tree:</code></td></tr><tr><td>🌰 <code>:chestnut:</code></td><td>🌱 <code>:seedling:</code></td><td>🌼 <code>:blossom:</code></td></tr><tr><td>🌾 <code>:ear_of_rice:</code></td><td>🐚 <code>:shell:</code></td><td>🌐 <code>:globe_with_meridians:</code></td></tr><tr><td>🌞 <code>:sun_with_face:</code></td><td>🌝 <code>:full_moon_with_face:</code></td><td>🌚 <code>:new_moon_with_face:</code></td></tr><tr><td>🌑 <code>:new_moon:</code></td><td>🌒 <code>:waxing_crescent_moon:</code></td><td>🌓 <code>:first_quarter_moon:</code></td></tr><tr><td>🌔 <code>:waxing_gibbous_moon:</code></td><td>🌕 <code>:full_moon:</code></td><td>🌖 <code>:waning_gibbous_moon:</code></td></tr><tr><td>🌗 <code>:last_quarter_moon:</code></td><td>🌘 <code>:waning_crescent_moon:</code></td><td>🌜 <code>:last_quarter_moon_with_face:</code></td></tr><tr><td>🌛 <code>:first_quarter_moon_with_face:</code></td><td>🌔 <code>:moon:</code></td><td>🌍 <code>:earth_africa:</code></td></tr><tr><td>🌎 <code>:earth_americas:</code></td><td>🌏 <code>:earth_asia:</code></td><td>🌋 <code>:volcano:</code></td></tr><tr><td>🌌 <code>:milky_way:</code></td><td>⛅️ <code>:partly_sunny:</code></td><td>:octocat: <code>:octocat:</code></td></tr><tr><td>:squirrel: <code>:squirrel:</code></td><td></td><td></td></tr></tbody></table><h3 id="Objects">Objects</h3><table><thead><tr><th>🎍 <code>:bamboo:</code></th><th>💝 <code>:gift_heart:</code></th><th>🎎 <code>:dolls:</code></th></tr></thead><tbody><tr><td>🎒 <code>:school_satchel:</code></td><td>🎓 <code>:mortar_board:</code></td><td>🎏 <code>:flags:</code></td></tr><tr><td>🎆 <code>:fireworks:</code></td><td>🎇 <code>:sparkler:</code></td><td>🎐 <code>:wind_chime:</code></td></tr><tr><td>🎑 <code>:rice_scene:</code></td><td>🎃 <code>:jack_o_lantern:</code></td><td>👻 <code>:ghost:</code></td></tr><tr><td>🎅 <code>:santa:</code></td><td>🎄 <code>:christmas_tree:</code></td><td>🎁 <code>:gift:</code></td></tr><tr><td>🔔 <code>:bell:</code></td><td>🔕 <code>:no_bell:</code></td><td>🎋 <code>:tanabata_tree:</code></td></tr><tr><td>🎉 <code>:tada:</code></td><td>🎊 <code>:confetti_ball:</code></td><td>🎈 <code>:balloon:</code></td></tr><tr><td>🔮 <code>:crystal_ball:</code></td><td>💿 <code>:cd:</code></td><td>📀 <code>:dvd:</code></td></tr><tr><td>💾 <code>:floppy_disk:</code></td><td>📷 <code>:camera:</code></td><td>📹 <code>:video_camera:</code></td></tr><tr><td>🎥 <code>:movie_camera:</code></td><td>💻 <code>:computer:</code></td><td>📺 <code>:tv:</code></td></tr><tr><td>📱 <code>:iphone:</code></td><td>☎️ <code>:phone:</code></td><td>☎️ <code>:telephone:</code></td></tr><tr><td>📞 <code>:telephone_receiver:</code></td><td>📟 <code>:pager:</code></td><td>📠 <code>:fax:</code></td></tr><tr><td>💽 <code>:minidisc:</code></td><td>📼 <code>:vhs:</code></td><td>🔉 <code>:sound:</code></td></tr><tr><td>🔈 <code>:speaker:</code></td><td>🔇 <code>:mute:</code></td><td>📢 <code>:loudspeaker:</code></td></tr><tr><td>📣 <code>:mega:</code></td><td>⌛️ <code>:hourglass:</code></td><td>⏳ <code>:hourglass_flowing_sand:</code></td></tr><tr><td>⏰ <code>:alarm_clock:</code></td><td>⌚️ <code>:watch:</code></td><td>📻 <code>:radio:</code></td></tr><tr><td>📡 <code>:satellite:</code></td><td>➿ <code>:loop:</code></td><td>🔍 <code>:mag:</code></td></tr><tr><td>🔎 <code>:mag_right:</code></td><td>🔓 <code>:unlock:</code></td><td>🔒 <code>:lock:</code></td></tr><tr><td>🔏 <code>:lock_with_ink_pen:</code></td><td>🔐 <code>:closed_lock_with_key:</code></td><td>🔑 <code>:key:</code></td></tr><tr><td>💡 <code>:bulb:</code></td><td>🔦 <code>:flashlight:</code></td><td>🔆 <code>:high_brightness:</code></td></tr><tr><td>🔅 <code>:low_brightness:</code></td><td>🔌 <code>:electric_plug:</code></td><td>🔋 <code>:battery:</code></td></tr><tr><td>📲 <code>:calling:</code></td><td>✉️ <code>:email:</code></td><td>📫 <code>:mailbox:</code></td></tr><tr><td>📮 <code>:postbox:</code></td><td>🛀 <code>:bath:</code></td><td>🛁 <code>:bathtub:</code></td></tr><tr><td>🚿 <code>:shower:</code></td><td>🚽 <code>:toilet:</code></td><td>🔧 <code>:wrench:</code></td></tr><tr><td>🔩 <code>:nut_and_bolt:</code></td><td>🔨 <code>:hammer:</code></td><td>💺 <code>:seat:</code></td></tr><tr><td>💰 <code>:moneybag:</code></td><td>💴 <code>:yen:</code></td><td>💵 <code>:dollar:</code></td></tr><tr><td>💷 <code>:pound:</code></td><td>💶 <code>:euro:</code></td><td>💳 <code>:credit_card:</code></td></tr><tr><td>💸 <code>:money_with_wings:</code></td><td>📧 <code>:e-mail:</code></td><td>📥 <code>:inbox_tray:</code></td></tr><tr><td>📤 <code>:outbox_tray:</code></td><td>✉️ <code>:envelope:</code></td><td>📨 <code>:incoming_envelope:</code></td></tr><tr><td>📯 <code>:postal_horn:</code></td><td>📪 <code>:mailbox_closed:</code></td><td>📬 <code>:mailbox_with_mail:</code></td></tr><tr><td>📭 <code>:mailbox_with_no_mail:</code></td><td>🚪 <code>:door:</code></td><td>🚬 <code>:smoking:</code></td></tr><tr><td>💣 <code>:bomb:</code></td><td>🔫 <code>:gun:</code></td><td>🔪 <code>:hocho:</code></td></tr><tr><td>💊 <code>:pill:</code></td><td>💉 <code>:syringe:</code></td><td>📄 <code>:page_facing_up:</code></td></tr><tr><td>📃 <code>:page_with_curl:</code></td><td>📑 <code>:bookmark_tabs:</code></td><td>📊 <code>:bar_chart:</code></td></tr><tr><td>📈 <code>:chart_with_upwards_trend:</code></td><td>📉 <code>:chart_with_downwards_trend:</code></td><td>📜 <code>:scroll:</code></td></tr><tr><td>📋 <code>:clipboard:</code></td><td>📆 <code>:calendar:</code></td><td>📅 <code>:date:</code></td></tr><tr><td>📇 <code>:card_index:</code></td><td>📁 <code>:file_folder:</code></td><td>📂 <code>:open_file_folder:</code></td></tr><tr><td>✂️ <code>:scissors:</code></td><td>📌 <code>:pushpin:</code></td><td>📎 <code>:paperclip:</code></td></tr><tr><td>✒️ <code>:black_nib:</code></td><td>✏️ <code>:pencil2:</code></td><td>📏 <code>:straight_ruler:</code></td></tr><tr><td>📐 <code>:triangular_ruler:</code></td><td>📕 <code>:closed_book:</code></td><td>📗 <code>:green_book:</code></td></tr><tr><td>📘 <code>:blue_book:</code></td><td>📙 <code>:orange_book:</code></td><td>📓 <code>:notebook:</code></td></tr><tr><td>:notebook_with_decorative_thumbnail: <code>:notebook_with_decorative_cover:</code></td><td>📒 <code>:ledger:</code></td><td>📚 <code>:books:</code></td></tr><tr><td>🔖 <code>:bookmark:</code></td><td>📛 <code>:name_badge:</code></td><td>🔬 <code>:microscope:</code></td></tr><tr><td>🔭 <code>:telescope:</code></td><td>📰 <code>:newspaper:</code></td><td>🏈 <code>:football:</code></td></tr><tr><td>🏀 <code>:basketball:</code></td><td>⚽️ <code>:soccer:</code></td><td>⚾️ <code>:baseball:</code></td></tr><tr><td>🎾 <code>:tennis:</code></td><td>🎱 <code>:8ball:</code></td><td>🏉 <code>:rugby_football:</code></td></tr><tr><td>🎳 <code>:bowling:</code></td><td>⛳️ <code>:golf:</code></td><td>🚵 <code>:mountain_bicyclist:</code></td></tr><tr><td>🚴 <code>:bicyclist:</code></td><td>🏇 <code>:horse_racing:</code></td><td>🏂 <code>:snowboarder:</code></td></tr><tr><td>🏊 <code>:swimmer:</code></td><td>🏄 <code>:surfer:</code></td><td>🎿 <code>:ski:</code></td></tr><tr><td>♠️ <code>:spades:</code></td><td>♥️ <code>:hearts:</code></td><td>♣️ <code>:clubs:</code></td></tr><tr><td>♦️ <code>:diamonds:</code></td><td>💎 <code>:gem:</code></td><td>💍 <code>:ring:</code></td></tr><tr><td>🏆 <code>:trophy:</code></td><td>🎼 <code>:musical_score:</code></td><td>🎹 <code>:musical_keyboard:</code></td></tr><tr><td>🎻 <code>:violin:</code></td><td>👾 <code>:space_invader:</code></td><td>🎮 <code>:video_game:</code></td></tr><tr><td>🃏 <code>:black_joker:</code></td><td>🎴 <code>:flower_playing_cards:</code></td><td>🎲 <code>:game_die:</code></td></tr><tr><td>🎯 <code>:dart:</code></td><td>🀄️ <code>:mahjong:</code></td><td>🎬 <code>:clapper:</code></td></tr><tr><td>📝 <code>:memo:</code></td><td>📝 <code>:pencil:</code></td><td>📖 <code>:book:</code></td></tr><tr><td>🎨 <code>:art:</code></td><td>🎤 <code>:microphone:</code></td><td>🎧 <code>:headphones:</code></td></tr><tr><td>🎺 <code>:trumpet:</code></td><td>🎷 <code>:saxophone:</code></td><td>🎸 <code>:guitar:</code></td></tr><tr><td>👞 <code>:shoe:</code></td><td>👡 <code>:sandal:</code></td><td>👠 <code>:high_heel:</code></td></tr><tr><td>💄 <code>:lipstick:</code></td><td>👢 <code>:boot:</code></td><td>👕 <code>:shirt:</code></td></tr><tr><td>👕 <code>:tshirt:</code></td><td>👔 <code>:necktie:</code></td><td>👚 <code>:womans_clothes:</code></td></tr><tr><td>👗 <code>:dress:</code></td><td>🎽 <code>:running_shirt_with_sash:</code></td><td>👖 <code>:jeans:</code></td></tr><tr><td>👘 <code>:kimono:</code></td><td>👙 <code>:bikini:</code></td><td>🎀 <code>:ribbon:</code></td></tr><tr><td>🎩 <code>:tophat:</code></td><td>👑 <code>:crown:</code></td><td>👒 <code>:womans_hat:</code></td></tr><tr><td>👞 <code>:mans_shoe:</code></td><td>🌂 <code>:closed_umbrella:</code></td><td>💼 <code>:briefcase:</code></td></tr><tr><td>👜 <code>:handbag:</code></td><td>👝 <code>:pouch:</code></td><td>👛 <code>:purse:</code></td></tr><tr><td>👓 <code>:eyeglasses:</code></td><td>🎣 <code>:fishing_pole_and_fish:</code></td><td>☕️ <code>:coffee:</code></td></tr><tr><td>🍵 <code>:tea:</code></td><td>🍶 <code>:sake:</code></td><td>🍼 <code>:baby_bottle:</code></td></tr><tr><td>🍺 <code>:beer:</code></td><td>🍻 <code>:beers:</code></td><td>🍸 <code>:cocktail:</code></td></tr><tr><td>🍹 <code>:tropical_drink:</code></td><td>🍷 <code>:wine_glass:</code></td><td>🍴 <code>:fork_and_knife:</code></td></tr><tr><td>🍕 <code>:pizza:</code></td><td>🍔 <code>:hamburger:</code></td><td>🍟 <code>:fries:</code></td></tr><tr><td>🍗 <code>:poultry_leg:</code></td><td>🍖 <code>:meat_on_bone:</code></td><td>🍝 <code>:spaghetti:</code></td></tr><tr><td>🍛 <code>:curry:</code></td><td>🍤 <code>:fried_shrimp:</code></td><td>🍱 <code>:bento:</code></td></tr><tr><td>🍣 <code>:sushi:</code></td><td>🍥 <code>:fish_cake:</code></td><td>🍙 <code>:rice_ball:</code></td></tr><tr><td>🍘 <code>:rice_cracker:</code></td><td>🍚 <code>:rice:</code></td><td>🍜 <code>:ramen:</code></td></tr><tr><td>🍲 <code>:stew:</code></td><td>🍢 <code>:oden:</code></td><td>🍡 <code>:dango:</code></td></tr><tr><td>🥚 <code>:egg:</code></td><td>🍞 <code>:bread:</code></td><td>🍩 <code>:doughnut:</code></td></tr><tr><td>🍮 <code>:custard:</code></td><td>🍦 <code>:icecream:</code></td><td>🍨 <code>:ice_cream:</code></td></tr><tr><td>🍧 <code>:shaved_ice:</code></td><td>🎂 <code>:birthday:</code></td><td>🍰 <code>:cake:</code></td></tr><tr><td>🍪 <code>:cookie:</code></td><td>🍫 <code>:chocolate_bar:</code></td><td>🍬 <code>:candy:</code></td></tr><tr><td>🍭 <code>:lollipop:</code></td><td>🍯 <code>:honey_pot:</code></td><td>🍎 <code>:apple:</code></td></tr><tr><td>🍏 <code>:green_apple:</code></td><td>🍊 <code>:tangerine:</code></td><td>🍋 <code>:lemon:</code></td></tr><tr><td>🍒 <code>:cherries:</code></td><td>🍇 <code>:grapes:</code></td><td>🍉 <code>:watermelon:</code></td></tr><tr><td>🍓 <code>:strawberry:</code></td><td>🍑 <code>:peach:</code></td><td>🍈 <code>:melon:</code></td></tr><tr><td>🍌 <code>:banana:</code></td><td>🍐 <code>:pear:</code></td><td>🍍 <code>:pineapple:</code></td></tr><tr><td>🍠 <code>:sweet_potato:</code></td><td>🍆 <code>:eggplant:</code></td><td>🍅 <code>:tomato:</code></td></tr><tr><td>🌽 <code>:corn:</code></td><td></td><td></td></tr></tbody></table><h3 id="Places">Places</h3><table><thead><tr><th>🏠 <code>:house:</code></th><th>🏡 <code>:house_with_garden:</code></th><th>🏫 <code>:school:</code></th></tr></thead><tbody><tr><td>🏢 <code>:office:</code></td><td>🏣 <code>:post_office:</code></td><td>🏥 <code>:hospital:</code></td></tr><tr><td>🏦 <code>:bank:</code></td><td>🏪 <code>:convenience_store:</code></td><td>🏩 <code>:love_hotel:</code></td></tr><tr><td>🏨 <code>:hotel:</code></td><td>💒 <code>:wedding:</code></td><td>⛪️ <code>:church:</code></td></tr><tr><td>🏬 <code>:department_store:</code></td><td>🏤 <code>:european_post_office:</code></td><td>🌇 <code>:city_sunrise:</code></td></tr><tr><td>🌆 <code>:city_sunset:</code></td><td>🏯 <code>:japanese_castle:</code></td><td>🏰 <code>:european_castle:</code></td></tr><tr><td>⛺️ <code>:tent:</code></td><td>🏭 <code>:factory:</code></td><td>🗼 <code>:tokyo_tower:</code></td></tr><tr><td>🗾 <code>:japan:</code></td><td>🗻 <code>:mount_fuji:</code></td><td>🌄 <code>:sunrise_over_mountains:</code></td></tr><tr><td>🌅 <code>:sunrise:</code></td><td>🌠 <code>:stars:</code></td><td>🗽 <code>:statue_of_liberty:</code></td></tr><tr><td>🌉 <code>:bridge_at_night:</code></td><td>🎠 <code>:carousel_horse:</code></td><td>🌈 <code>:rainbow:</code></td></tr><tr><td>🎡 <code>:ferris_wheel:</code></td><td>⛲️ <code>:fountain:</code></td><td>🎢 <code>:roller_coaster:</code></td></tr><tr><td>🚢 <code>:ship:</code></td><td>🚤 <code>:speedboat:</code></td><td>⛵️ <code>:boat:</code></td></tr><tr><td>⛵️ <code>:sailboat:</code></td><td>🚣 <code>:rowboat:</code></td><td>⚓️ <code>:anchor:</code></td></tr><tr><td>🚀 <code>:rocket:</code></td><td>✈️ <code>:airplane:</code></td><td>🚁 <code>:helicopter:</code></td></tr><tr><td>🚂 <code>:steam_locomotive:</code></td><td>🚊 <code>:tram:</code></td><td>🚞 <code>:mountain_railway:</code></td></tr><tr><td>🚲 <code>:bike:</code></td><td>🚡 <code>:aerial_tramway:</code></td><td>🚟 <code>:suspension_railway:</code></td></tr><tr><td>🚠 <code>:mountain_cableway:</code></td><td>🚜 <code>:tractor:</code></td><td>🚙 <code>:blue_car:</code></td></tr><tr><td>🚘 <code>:oncoming_automobile:</code></td><td>🚗 <code>:car:</code></td><td>🚗 <code>:red_car:</code></td></tr><tr><td>🚕 <code>:taxi:</code></td><td>🚖 <code>:oncoming_taxi:</code></td><td>🚛 <code>:articulated_lorry:</code></td></tr><tr><td>🚌 <code>:bus:</code></td><td>🚍 <code>:oncoming_bus:</code></td><td>🚨 <code>:rotating_light:</code></td></tr><tr><td>🚓 <code>:police_car:</code></td><td>🚔 <code>:oncoming_police_car:</code></td><td>🚒 <code>:fire_engine:</code></td></tr><tr><td>🚑 <code>:ambulance:</code></td><td>🚐 <code>:minibus:</code></td><td>🚚 <code>:truck:</code></td></tr><tr><td>🚋 <code>:train:</code></td><td>🚉 <code>:station:</code></td><td>🚆 <code>:train2:</code></td></tr><tr><td>🚅 <code>:bullettrain_front:</code></td><td>🚄 <code>:bullettrain_side:</code></td><td>🚈 <code>:light_rail:</code></td></tr><tr><td>🚝 <code>:monorail:</code></td><td>🚃 <code>:railway_car:</code></td><td>🚎 <code>:trolleybus:</code></td></tr><tr><td>🎫 <code>:ticket:</code></td><td>⛽️ <code>:fuelpump:</code></td><td>🚦 <code>:vertical_traffic_light:</code></td></tr><tr><td>🚥 <code>:traffic_light:</code></td><td>⚠️ <code>:warning:</code></td><td>🚧 <code>:construction:</code></td></tr><tr><td>🔰 <code>:beginner:</code></td><td>🏧 <code>:atm:</code></td><td>🎰 <code>:slot_machine:</code></td></tr><tr><td>🚏 <code>:busstop:</code></td><td>💈 <code>:barber:</code></td><td>♨️ <code>:hotsprings:</code></td></tr><tr><td>🏁 <code>:checkered_flag:</code></td><td>🎌 <code>:crossed_flags:</code></td><td>🏮 <code>:izakaya_lantern:</code></td></tr><tr><td>🗿 <code>:moyai:</code></td><td>🎪 <code>:circus_tent:</code></td><td>🎭 <code>:performing_arts:</code></td></tr><tr><td>📍 <code>:round_pushpin:</code></td><td>🚩 <code>:triangular_flag_on_post:</code></td><td>🇯🇵 <code>:jp:</code></td></tr><tr><td>🇰🇷 <code>:kr:</code></td><td>🇨🇳 <code>:cn:</code></td><td>🇺🇸 <code>:us:</code></td></tr><tr><td>🇫🇷 <code>:fr:</code></td><td>🇪🇸 <code>:es:</code></td><td>🇮🇹 <code>:it:</code></td></tr><tr><td>🇷🇺 <code>:ru:</code></td><td>🇬🇧 <code>:gb:</code></td><td>🇬🇧 <code>:uk:</code></td></tr><tr><td>🇩🇪 <code>:de:</code></td><td></td><td></td></tr></tbody></table><h3 id="Symbols">Symbols</h3><table><thead><tr><th>1️⃣ <code>:one:</code></th><th>2️⃣ <code>:two:</code></th><th>3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td>4️⃣ <code>:four:</code></td><td>5️⃣ <code>:five:</code></td><td>6️⃣ <code>:six:</code></td></tr><tr><td>7️⃣ <code>:seven:</code></td><td>8️⃣ <code>:eight:</code></td><td>9️⃣ <code>:nine:</code></td></tr><tr><td>🔟 <code>:keycap_ten:</code></td><td>🔢 <code>:1234:</code></td><td>0️⃣ <code>:zero:</code></td></tr><tr><td>#️⃣ <code>:hash:</code></td><td>🔣 <code>:symbols:</code></td><td>◀️ <code>:arrow_backward:</code></td></tr><tr><td>⬇️ <code>:arrow_down:</code></td><td>▶️ <code>:arrow_forward:</code></td><td>⬅️ <code>:arrow_left:</code></td></tr><tr><td>🔠 <code>:capital_abcd:</code></td><td>🔡 <code>:abcd:</code></td><td>🔤 <code>:abc:</code></td></tr><tr><td>↙️ <code>:arrow_lower_left:</code></td><td>↘️ <code>:arrow_lower_right:</code></td><td>➡️ <code>:arrow_right:</code></td></tr><tr><td>⬆️ <code>:arrow_up:</code></td><td>↖️ <code>:arrow_upper_left:</code></td><td>↗️ <code>:arrow_upper_right:</code></td></tr><tr><td>⏬ <code>:arrow_double_down:</code></td><td>⏫ <code>:arrow_double_up:</code></td><td>🔽 <code>:arrow_down_small:</code></td></tr><tr><td>⤵️ <code>:arrow_heading_down:</code></td><td>⤴️ <code>:arrow_heading_up:</code></td><td>↩️ <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td>↪️ <code>:arrow_right_hook:</code></td><td>↔️ <code>:left_right_arrow:</code></td><td>↕️ <code>:arrow_up_down:</code></td></tr><tr><td>🔼 <code>:arrow_up_small:</code></td><td>🔃 <code>:arrows_clockwise:</code></td><td>🔄 <code>:arrows_counterclockwise:</code></td></tr><tr><td>⏪ <code>:rewind:</code></td><td>⏩ <code>:fast_forward:</code></td><td>ℹ️ <code>:information_source:</code></td></tr><tr><td>🆗 <code>:ok:</code></td><td>🔀 <code>:twisted_rightwards_arrows:</code></td><td>🔁 <code>:repeat:</code></td></tr><tr><td>🔂 <code>:repeat_one:</code></td><td>🆕 <code>:new:</code></td><td>🔝 <code>:top:</code></td></tr><tr><td>🆙 <code>:up:</code></td><td>🆒 <code>:cool:</code></td><td>🆓 <code>:free:</code></td></tr><tr><td>🆖 <code>:ng:</code></td><td>🎦 <code>:cinema:</code></td><td>🈁 <code>:koko:</code></td></tr><tr><td>📶 <code>:signal_strength:</code></td><td>:u5272: <code>:u5272:</code></td><td>:u5408: <code>:u5408:</code></td></tr><tr><td>:u55b6: <code>:u55b6:</code></td><td>:u6307: <code>:u6307:</code></td><td>:u6708: <code>:u6708:</code></td></tr><tr><td>:u6709: <code>:u6709:</code></td><td>🈵 <code>:u6e80:</code></td><td>:u7121: <code>:u7121:</code></td></tr><tr><td>:u7533: <code>:u7533:</code></td><td>:u7a7a: <code>:u7a7a:</code></td><td>:u7981: <code>:u7981:</code></td></tr><tr><td>🈂️ <code>:sa:</code></td><td>🚻 <code>:restroom:</code></td><td>🚹 <code>:mens:</code></td></tr><tr><td>🚺 <code>:womens:</code></td><td>🚼 <code>:baby_symbol:</code></td><td>🚭 <code>:no_smoking:</code></td></tr><tr><td>🅿️ <code>:parking:</code></td><td>♿️ <code>:wheelchair:</code></td><td>🚇 <code>:metro:</code></td></tr><tr><td>🛄 <code>:baggage_claim:</code></td><td>🉑 <code>:accept:</code></td><td>🚾 <code>:wc:</code></td></tr><tr><td>🚰 <code>:potable_water:</code></td><td>🚮 <code>:put_litter_in_its_place:</code></td><td>㊙️ <code>:secret:</code></td></tr><tr><td>㊗️ <code>:congratulations:</code></td><td>Ⓜ️ <code>:m:</code></td><td>🛂 <code>:passport_control:</code></td></tr><tr><td>🛅 <code>:left_luggage:</code></td><td>🛃 <code>:customs:</code></td><td>🉐 <code>:ideograph_advantage:</code></td></tr><tr><td>🆑 <code>:cl:</code></td><td>🆘 <code>:sos:</code></td><td>🆔 <code>:id:</code></td></tr><tr><td>🚫 <code>:no_entry_sign:</code></td><td>🔞 <code>:underage:</code></td><td>📵 <code>:no_mobile_phones:</code></td></tr><tr><td>🚯 <code>:do_not_litter:</code></td><td>🚱 <code>:non-potable_water:</code></td><td>🚳 <code>:no_bicycles:</code></td></tr><tr><td>🚷 <code>:no_pedestrians:</code></td><td>🚸 <code>:children_crossing:</code></td><td>⛔️ <code>:no_entry:</code></td></tr><tr><td>✳️ <code>:eight_spoked_asterisk:</code></td><td>✴️ <code>:eight_pointed_black_star:</code></td><td>💟 <code>:heart_decoration:</code></td></tr><tr><td>🆚 <code>:vs:</code></td><td>📳 <code>:vibration_mode:</code></td><td>📴 <code>:mobile_phone_off:</code></td></tr><tr><td>💹 <code>:chart:</code></td><td>💱 <code>:currency_exchange:</code></td><td>♈️ <code>:aries:</code></td></tr><tr><td>♉️ <code>:taurus:</code></td><td>♊️ <code>:gemini:</code></td><td>♋️ <code>:cancer:</code></td></tr><tr><td>♌️ <code>:leo:</code></td><td>♍️ <code>:virgo:</code></td><td>♎️ <code>:libra:</code></td></tr><tr><td>♏️ <code>:scorpius:</code></td><td>♐️ <code>:sagittarius:</code></td><td>♑️ <code>:capricorn:</code></td></tr><tr><td>♒️ <code>:aquarius:</code></td><td>♓️ <code>:pisces:</code></td><td>⛎ <code>:ophiuchus:</code></td></tr><tr><td>🔯 <code>:six_pointed_star:</code></td><td>❎ <code>:negative_squared_cross_mark:</code></td><td>🅰️ <code>:a:</code></td></tr><tr><td>🅱️ <code>:b:</code></td><td>🆎 <code>:ab:</code></td><td>🅾️ <code>:o2:</code></td></tr><tr><td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td><td>♻️ <code>:recycle:</code></td><td>🔚 <code>:end:</code></td></tr><tr><td>🔛 <code>:on:</code></td><td>🔜 <code>:soon:</code></td><td>🕐 <code>:clock1:</code></td></tr><tr><td>🕜 <code>:clock130:</code></td><td>🕙 <code>:clock10:</code></td><td>🕥 <code>:clock1030:</code></td></tr><tr><td>🕚 <code>:clock11:</code></td><td>🕦 <code>:clock1130:</code></td><td>🕛 <code>:clock12:</code></td></tr><tr><td>🕧 <code>:clock1230:</code></td><td>🕑 <code>:clock2:</code></td><td>🕝 <code>:clock230:</code></td></tr><tr><td>🕒 <code>:clock3:</code></td><td>🕞 <code>:clock330:</code></td><td>🕓 <code>:clock4:</code></td></tr><tr><td>🕟 <code>:clock430:</code></td><td>🕔 <code>:clock5:</code></td><td>🕠 <code>:clock530:</code></td></tr><tr><td>🕕 <code>:clock6:</code></td><td>🕡 <code>:clock630:</code></td><td>🕖 <code>:clock7:</code></td></tr><tr><td>🕢 <code>:clock730:</code></td><td>🕗 <code>:clock8:</code></td><td>🕣 <code>:clock830:</code></td></tr><tr><td>🕘 <code>:clock9:</code></td><td>🕤 <code>:clock930:</code></td><td>💲 <code>:heavy_dollar_sign:</code></td></tr><tr><td>©️ <code>:copyright:</code></td><td>®️ <code>:registered:</code></td><td>™️ <code>:tm:</code></td></tr><tr><td>❌ <code>:x:</code></td><td>❗️ <code>:heavy_exclamation_mark:</code></td><td>‼️ <code>:bangbang:</code></td></tr><tr><td>⁉️ <code>:interrobang:</code></td><td>⭕️ <code>:o:</code></td><td>✖️ <code>:heavy_multiplication_x:</code></td></tr><tr><td>➕ <code>:heavy_plus_sign:</code></td><td>➖ <code>:heavy_minus_sign:</code></td><td>➗ <code>:heavy_division_sign:</code></td></tr><tr><td>💮 <code>:white_flower:</code></td><td>💯 <code>:100:</code></td><td>✔️ <code>:heavy_check_mark:</code></td></tr><tr><td>☑️ <code>:ballot_box_with_check:</code></td><td>🔘 <code>:radio_button:</code></td><td>🔗 <code>:link:</code></td></tr><tr><td>➰ <code>:curly_loop:</code></td><td>〰️ <code>:wavy_dash:</code></td><td>〽️ <code>:part_alternation_mark:</code></td></tr><tr><td>🔱 <code>:trident:</code></td><td>:black_square: <code>:black_square:</code></td><td>:white_square: <code>:white_square:</code></td></tr><tr><td>✅ <code>:white_check_mark:</code></td><td>🔲 <code>:black_square_button:</code></td><td>🔳 <code>:white_square_button:</code></td></tr><tr><td>⚫️ <code>:black_circle:</code></td><td>⚪️ <code>:white_circle:</code></td><td>🔴 <code>:red_circle:</code></td></tr><tr><td>🔵 <code>:large_blue_circle:</code></td><td>🔷 <code>:large_blue_diamond:</code></td><td>🔶 <code>:large_orange_diamond:</code></td></tr><tr><td>🔹 <code>:small_blue_diamond:</code></td><td>🔸 <code>:small_orange_diamond:</code></td><td>🔺 <code>:small_red_triangle:</code></td></tr><tr><td>🔻 <code>:small_red_triangle_down:</code></td><td>:shipit: <code>:shipit:</code></td><td></td></tr></tbody></table><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>来源 <a href="https://github.com/caiyongji/emoji-list">https://github.com/caiyongji/emoji-list</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">GitHub的所有Emoji速查表呀~</summary>
    
    
    
    <category term="Emoji" scheme="https://blog.flesx.cn/categories/Emoji/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="Emoji" scheme="https://blog.flesx.cn/tags/Emoji/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器输入URL回车之后发生了什么</title>
    <link href="https://blog.flesx.cn/posts/4141.html"/>
    <id>https://blog.flesx.cn/posts/4141.html</id>
    <published>2020-06-26T07:28:27.000Z</published>
    <updated>2020-06-26T07:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p><p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p><p>**注意：**本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</p><h2 id="大致流程">大致流程</h2><ol><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li></ol><h2 id="一、URL-解析">一、URL 解析</h2><p><strong>地址解析：</strong></p><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><p><strong>HSTS</strong></p><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<a href="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS</a>。</p><p><strong>其他操作</strong></p><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><p><strong>检查缓存</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822181538.png" alt=""></p><h2 id="二、DNS-查询">二、DNS 查询</h2><p><strong>基本步骤</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822181732.png" alt=""></p><p><strong>1. 浏览器缓存</strong></p><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><p><strong>2. 操作系统缓存</strong></p><p>操作系统也有自己的 DNS缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><p><strong>3. 路由器缓存</strong></p><p>路由器也有自己的缓存。</p><p><strong>4. ISP DNS 缓存</strong></p><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><p><strong>根域名服务器查询</strong></p><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/1604181361-5a1397cca5644_articlex.png" alt=""></p><blockquote><p>根域名服务器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科</a></p></blockquote><p><strong>需要注意的点</strong></p><ol><li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地DNS服务器的过程）</li><li>迭代方式，就是本地DNS服务器到根域名服务器查询的方式。</li><li>什么是 DNS 劫持</li><li>前端 dns-prefetch 优化</li></ol><h2 id="三、TCP-连接">三、TCP 连接</h2><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822182400.png" alt=""></p><h3 id="1-应用层：发送-HTTP-请求"><strong>1. 应用层：发送 HTTP 请求</strong></h3><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><h3 id="2-传输层：TCP-传输报文"><strong>2. 传输层：TCP 传输报文</strong></h3><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p><p>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。</p><p>相关知识点：</p><ol><li>SYN 泛洪攻击</li></ol></blockquote><h3 id="3-网络层：IP协议查询Mac地址"><strong>3. 网络层：IP协议查询Mac地址</strong></h3><p>将数据段打包，并加入源及目标的IP地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote><h3 id="4-链路层：以太网协议"><strong>4. 链路层：以太网协议</strong></h3><p><strong>以太网协议</strong></p><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p><ul><li>标头：数据包的发送者、接受者、数据类型</li><li>数据：数据包具体内容</li></ul><p><strong>Mac 地址</strong></p><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><p><strong>广播</strong></p><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p><strong>注意</strong>：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li>ARP 攻击</li></ol></blockquote><h4 id="服务器接受请求"><strong>服务器接受请求</strong></h4><p>接受过程就是把以上步骤逆转过来，参见上图。</p><h2 id="四、服务器处理请求">四、服务器处理请求</h2><p><strong>大致流程</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822183251.png" alt=""></p><p><strong>HTTPD</strong></p><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><p><strong>处理请求</strong></p><p>接受 TCP 报文后，会对连接进行处理，对HTTP协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>验证是否配置虚拟主机</li><li>验证虚拟主机是否接受此方法</li><li>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><p><strong>重定向</strong></p><p>假如服务器配置了 HTTP 重定向，就会返回一个 <code>301</code>永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：<a href="https://www.cnblogs.com/workest/p/3891321.html">详见这篇文章</a></p></blockquote><p><strong>URL 重写</strong></p><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h2 id="五、浏览器接受响应">五、浏览器接受响应</h2><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a> 类型去解析响应内容（比如 HTML、Image各有不同的解析方式）。</p><h2 id="六、渲染页面">六、渲染页面</h2><p><strong>浏览器内核</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/961f7b5d-9e06-4006-ab99-974e8e9e2ba5.png" alt=""></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p><strong>基本流程</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822183712.png" alt=""></p><h3 id="1-HTML-解析"><strong>1.HTML 解析</strong></h3><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><p><strong>1. 解码（encoding）</strong></p><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如UTF-8）转换成字符串，也就是HTML 代码。</p><p><strong>2. 预解析（pre-parsing）</strong></p><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如<code>img</code>标签的<code>src</code>属性，并将这个请求加到请求队列中。</p><p><strong>3. 符号化（Tokenization）</strong></p><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到<code>&lt;</code>，<code>&gt;</code>状态都会产生变化。</p><p><strong>4. 构建树（tree construction）</strong></p><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建<code>DOM</code>对象并把这些符号插入到<code>DOM</code>对象中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Web page parsing&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Web page parsing&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;This is an example Web page.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/1355879024-573db51949951_articlex.png" alt=""></p><p><strong>浏览器容错进制</strong></p><p>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><p><strong>事件</strong></p><p>当整个解析的过程完成以后，浏览器会通过<code>DOMContentLoaded</code>事件来通知<code>DOM</code>解析完成。</p><h3 id="2-CSS-解析">2. CSS 解析</h3><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据<a href="https://drafts.csswg.org/css-syntax-3/">语法规范</a>解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><p><strong>CSS 匹配规则</strong></p><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p &#123; font-size :14px &#125;</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为<code>div</code>。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><h3 id="3-渲染树">3. 渲染树</h3><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p></blockquote><p><strong>计算</strong></p><p>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>转化为<code>px</code>。</p><p><strong>级联</strong></p><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做<code>specificity</code>的公式，这个公式会通过：</p><ol><li>标签名、class、id</li><li>是否内联样式</li><li><code>!important</code></li></ol><p>然后得出一个权重值，取最高的那个。</p><p><strong>渲染阻塞</strong></p><p>当遇到一个<code>script</code>标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>CSS 会阻塞 JS 执行</li><li>JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>CSS 资源排在 JavaScript 资源前面</li><li>JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<a href="https://github.com/xiaoyu2er/blog/issues/8">这篇文章</a></p><h4 id="4-布局与绘制">4. 布局与绘制</h4><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><h4 id="5-合并渲染层"><strong>5. 合并渲染层</strong></h4><p>把以上绘制的所有图片合并，最终输出一张图片。</p><h4 id="6-回流与重绘"><strong>6. 回流与重绘</strong></h4><p><strong>回流(reflow)</strong></p><p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从<code>html</code>标签开始递归往下，重新计算位置和大小。</p><p>reflow基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><p><strong>重绘(repaint)</strong></p><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li><code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</li></ul><h4 id="7-JavaScript-编译执行">7. JavaScript 编译执行</h4><p><strong>大致流程</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822184523.png" alt=""></p><p>可以分为三个阶段：</p><h4 id="1-词法分析"><strong>1. 词法分析</strong></h4><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>分词，例如将<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>这样的词法单元。</li><li>解析，将词法单元转换成抽象语法树（AST）。</li><li>代码生成，将抽象语法树转换成机器指令。</li></ul><h4 id="2-预编译"><strong>2. 预编译</strong></h4><p>JS 有三种运行环境：</p><ul><li>全局环境</li><li>函数环境</li><li>eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p><strong>创建执行上下文</strong></p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>确认当前执行环境是否能访问变量</li></ul></li><li>确定 This 指向</li></ul><h4 id="3-执行"><strong>3. 执行</strong></h4><p><strong>JS 线程</strong></p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822184731.png" alt=""></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>定时器触发线程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>HTTP 异步请求线程：通过XMLHttpRequest连接后，通过浏览器新开的一个线程，监控readyState状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待JS引擎线程执行。</li></ul><p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p><p><strong>宏任务</strong></p><p>分为：</p><ul><li>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待JS引擎主线程上的任务执行完毕时才开始执行，例如异步Ajax、DOM事件，setTimeout等。</li></ul><p><strong>微任务</strong></p><p>微任务是ES6和Node环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png" alt=""></p><p><strong>代码例子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;1&#39;); &#x2F;&#x2F; 宏任务 同步</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&#39;2&#39;); &#x2F;&#x2F; 宏任务 异步</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&#39;3&#39;); &#x2F;&#x2F; 宏任务 同步</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&#39;4&#39;) &#x2F;&#x2F; 微任务</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#39;5&#39;) &#x2F;&#x2F; 宏任务 同步</span><br></pre></td></tr></table></figure><p>以上代码输出顺序为：1,3,5,4,2</p><h2 id="参考文档">参考文档</h2><ul><li><a href="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN</a></li><li><a href="https://alistapart.com/article/tags-to-dom/">Tags to DOM</a></li><li><a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">彻底理解浏览器的缓存机制</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li><li><a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入浅出浏览器渲染原理</a></li><li><a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js引擎的执行过程（一）</a></li><li>还有一些找不到了。。。。。</li></ul><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>本文转载自 <a href="https://4ark.me/">4Ark</a></p><p>原文链接：<a href="https://4ark.me/post/b6c7c0a2.html">https://4ark.me/post/b6c7c0a2.html</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">在浏览器输入 URL 回车之后发生了什么（超详细版）</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    
    <category term="浏览器" scheme="https://blog.flesx.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="URL" scheme="https://blog.flesx.cn/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>文言文编程火了，可我完全学不懂</title>
    <link href="https://blog.flesx.cn/posts/24549.html"/>
    <id>https://blog.flesx.cn/posts/24549.html</id>
    <published>2020-06-17T10:20:26.000Z</published>
    <updated>2020-06-18T10:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>毕竟有易语言在前，有人认为中文可以降低国人学习编程的门槛，也增强汉语的国际地位。然而最近大火的文言文编程语言，让你明白什么叫&quot;中文比英语还难&quot;。</p><p><img src="https://static.zkqiang.cn/images/20191219213432.png-slim" alt=""></p><h2 id="Hello-wenyan">Hello wenyan</h2><p>最近有个 GitHub 项目火了 —— 文言编程语言 wenyan-lang。</p><p>现在这个项目已经超过 10K Stars 了（昨天看还是 9K，一夜涨了 1K），咱赶紧来研究下。</p><p>学语言嘛，当然先从 &quot;Hello world&quot; 开始，看看文言版怎么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">吾有一數。曰三。名之曰「甲」。</span><br><span class="line">為是「甲」遍。</span><br><span class="line">吾有一言。曰「「問天地好在。」」。書之。</span><br><span class="line">云云。</span><br></pre></td></tr></table></figure><p>没看懂，编译成 JavaScript：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var n &#x3D; 3;</span><br><span class="line">for (var i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">    console.log(&quot;問天地好在。&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">問天地好在。</span><br><span class="line">問天地好在。</span><br><span class="line">問天地好在。</span><br></pre></td></tr></table></figure><p>完全的中文编程有木有，使用古汉语语法，具有图灵完整性，可以编译成 JavaScript 或 Python。</p><p>如同古人篆书一般，一顿之乎者也，程序写好了！</p><h2 id="基础语法">基础语法</h2><p>赶紧学起来，第一章变量走起，中文编程肯定不能用 abc，还好我们有甲乙丙：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>吾有一數。曰三。名之曰「甲」。</code></td><td><code>var a = 3;</code></td></tr><tr><td><code>有數五十。名之曰「大衍」。</code></td><td><code>var dayan = 50;</code></td></tr><tr><td><code>吾有一言。曰「「噫吁戲」」。名之曰「乙」。</code></td><td><code>var b = &quot;alas!&quot;;</code></td></tr></tbody></table><p>true/false 我们也有对应的 陽/陰（繁体的阳/阴），类型就称为&quot;爻&quot;（卦符的基本符号）：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>吾有一爻。曰陰。名之曰「丙」。</code></td><td><code>var c = false;</code></td></tr></tbody></table><p>if 判断也没问题：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>若三不大於五者。乃得「「想當然耳」」。若非。乃得「「怪哉」」也。</code></td><td><code>if(3&lt;=5)&#123;return &quot;of course&quot;&#125;else&#123;return &quot;no way&quot;&#125;</code></td></tr></tbody></table><p>循环更为简洁，直接声明次数，最后以云云结尾：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>為是百遍。⋯⋯ 云云。</code></td><td><code>for (var i = 0; i &lt; 100; i++)&#123; ... &#125;</code></td></tr><tr><td><code>恆為是。⋯⋯ 云云。</code></td><td><code>while (true) &#123; ... &#125;</code></td></tr><tr><td><code>乃止。</code></td><td><code>break;</code></td></tr></tbody></table><p>加减乘除一应俱全，连逻辑运算符都支持：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>加一以二。乘其以三。</code></td><td><code>(1+2)*3</code></td></tr><tr><td><code>除十以三。所餘幾何。</code></td><td><code>10%3</code></td></tr><tr><td><code>減七百五十六以四百三十三。名之曰「甲」。</code></td><td><code>var a = 756-433;</code></td></tr><tr><td><code>夫「甲」「乙」中有陽乎。</code></td><td><code>a || b</code></td></tr></tbody></table><p>容器类型也支持，而且尊重汉语习惯，首个下标是从一开始：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>吾有一列。名之曰「甲」。充「甲」以四。以二。</code></td><td><code>var a = []; a.push(4, 2);</code></td></tr><tr><td><code>夫「寶劍」之長。</code></td><td><code>sword.length;</code></td></tr><tr><td><code>夫「甲」之一。</code></td><td><code>a[0]</code></td></tr><tr><td><code>夫「玫瑰」之「「名」」。</code></td><td><code>rose[&quot;name&quot;]</code></td></tr></tbody></table><p>下面是进阶语法了，定义一个函数 吾有一術：</p><table><thead><tr><th>wenyan</th><th>JavaScript</th></tr></thead><tbody><tr><td><code>吾有一術。名之曰「吸星大法」。是術曰。⋯⋯是謂「吸星大法」之術也。</code></td><td><code>function f()&#123;...&#125;</code></td></tr><tr><td><code>吾有一術。名之曰「六脈神劍」。欲行是術。必先得六數。曰「甲」。曰「乙」。曰「丙」。曰「丁」。曰「戊」。曰「己」乃行是術曰。⋯⋯是謂「六脈神劍」之術也。</code></td><td><code>function f(a,b,c,d,e,f)&#123;...&#125;</code></td></tr><tr><td><code>吾有一術。名之曰「翻倍」。欲行是術。必先得一數。曰「甲」。乃行是術曰。乘「甲」以二。名之曰「乙」。乃得「乙」。是謂「翻倍」之術也。</code></td><td><code>function double(a)&#123;var b = a * 2; return b;&#125;</code></td></tr><tr><td><code>施「翻倍」於「大衍」。</code></td><td><code>double(dayan);</code></td></tr><tr><td><code>吾有一數。曰五。書之。</code></td><td><code>console.log(5);</code></td></tr></tbody></table><h2 id="代码实例">代码实例</h2><p>作者提供了经典程序题目的文言版代码，比如埃拉托斯特尼筛法、 快速排序、曼德博集合、汉诺塔。</p><p>另外作者还提供了在线 IDE，可以直接编译执行代码。</p><h3 id="快排">快排</h3><p><img src="https://static.zkqiang.cn/images/20191220133312.png-slim" alt=""></p><h3 id="曼德博集合">曼德博集合</h3><p><img src="https://static.zkqiang.cn/images/20191220134039.png-slim" alt=""></p><p>看完这些代码让我感觉：</p><p>《九章算术》就是一本算法导论；</p><p>《孙子兵法》就是一本安全攻防；</p><p>《易经》大概是一本二进制逆向吧…</p><h2 id="一些题外话">一些题外话</h2><p>该项目的作者名叫 Huang Lingdong，卡内基梅隆大学（CMU）计算机专业大四学生。这么一位世界顶级高校的大佬，做这个项目其实只是一个期末作业亦或业余爱好。</p><p>点进 issues，广大中国编程爱好者也表达了对作者的敬佩：</p><p><img src="https://static.zkqiang.cn/images/20191220143545.png-slim" alt="">然而当我也惊叹这个项目的脑洞和创意时，在 issues 里还是看到了一些令我非常不悦的话题：</p><p><img src="https://static.zkqiang.cn/images/20191220143753.png-slim" alt=""></p><p>这位兄弟的脑洞看来比作者还大…</p><p>不然怎么把一个编程语言联系到风投…</p><p><img src="https://static.zkqiang.cn/images/20191220143751.png-slim" alt=""></p><p>这位兄弟前半句是对的，但后半句似乎有一些鄙夷和不屑？</p><p>我在下边回复给他一个表情：</p><p><img src="https://static.zkqiang.cn/images/20191220144408.jpg-slim" alt=""></p><p>当然哪里都少不了&quot;意义党&quot;：</p><p><img src="https://static.zkqiang.cn/images/20191220144549.png-slim" alt="">真是哪里都有上纲上线的人，作者自娱自乐写了一个开源项目，为此查阅大量古汉语资料，也不图什么名利，就获得几千 Stars，就成为了某些人嘴里的恰烂钱、无意义、垃圾项目。</p><p><strong>而当我点开这些人的头像时，发现他们挂着都是一些 Fork 和不明所以的 Repo，我也不知道他们挂这些的意义是什么…</strong></p><p>我当然也从源码看出，这个项目可能叫&quot;解释器&quot;更贴切一些，但作者也从来没说这是一个多么认真、能用于生产环境的正式项目。</p><h2 id="Esolang">Esolang</h2><p>如果你和上面的他们有类似的想法，那么我给你普及一个编程名词：</p><p><strong>Esoteric programming language</strong>，简称 Esolang，它们的设计被用于测试计算机语言设计的极限，作为一个概念的证明，或仅仅是一个玩笑。Esolang 创作者通常并不打算让它成为主流编程语言，他们几乎不会在意语言的可用性，甚至恰恰相反，会故意增加使用难度。</p><p>比如 Brainfuck，它是在 1993 年被创造的编程语言，语法仅包含八种符号，没有任何单词，用它打印 Hello world 是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]</span><br><span class="line">&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.</span><br><span class="line">&gt;.+++.------.--------.&gt;+.&gt;.</span><br></pre></td></tr></table></figure><p>再比如 MarioLANG，它同样只能使用符号，需要使用形似马里奥关卡的语法来书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">++++:       &gt;       &gt;  +:+:+:+:+:+:+:::::</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;+      &gt;^&#x3D;&#x3D;&#x3D;    &quot;&quot;&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    +:-):(:^&#x3D;   &#x3D;                       !</span><br><span class="line">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    &#x3D;                      #</span><br><span class="line">                  &#x3D; !             .+.,:-&lt;</span><br><span class="line">                   &#x3D;###           &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br></pre></td></tr></table></figure><p>Parenthesis Hell，言如其名，括号地狱，只能使用括号来书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(()()(()()(()()()()((()()(()(()((()((()()()((()((()()()((()((((()()(()(</span><br><span class="line">)()()()()(((()(((()((()((((()(((()()(()()((()((()()()((()()(()()()()(()</span><br><span class="line">()()()(()()()()(()(())))))))))))))))))))))))))))))))))))))))))))))))))</span><br></pre></td></tr></table></figure><p>所以 wenyan-lang 实际也属于 Esolang，并不是用于生产的语言，你在这些语言中寻找意义，我觉得你这种行为就挺没意义的…</p><p>GitHub: <a href="https://github.com/wenyan-lang/wenyan">https://github.com/wenyan-lang/wenyan</a></p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>本文转载自 <a href="https://zkqiang.cn/">zkqiang's space</a></p><p>原文链接：<a href="https://zkqiang.cn/posts/95ac9d73/">https://zkqiang.cn/posts/95ac9d73/</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">毕竟有易语言在前，有人认为中文可以降低国人学习编程的门槛，也增强汉语的国际地位。然而最近大火的文言文编程语言，让你明白什么叫“中文比英文还难”。</summary>
    
    
    
    <category term="文言文编程" scheme="https://blog.flesx.cn/categories/%E6%96%87%E8%A8%80%E6%96%87%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="文言文编程" scheme="https://blog.flesx.cn/tags/%E6%96%87%E8%A8%80%E6%96%87%E7%BC%96%E7%A8%8B/"/>
    
    <category term="wenyan-lang" scheme="https://blog.flesx.cn/tags/wenyan-lang/"/>
    
  </entry>
  
  <entry>
    <title>实用网站和Windows好用的软件推荐</title>
    <link href="https://blog.flesx.cn/posts/24179.html"/>
    <id>https://blog.flesx.cn/posts/24179.html</id>
    <published>2020-05-19T12:00:56.000Z</published>
    <updated>2020-05-19T12:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-note blockquote-note__warning"><div class="blockquote-note__header no-content"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></div>多图预警！</div></blockquote><h2 id="网站">网站</h2><h3 id="Flush-Cache">Flush Cache</h3><p>语言：英</p><p>网址：<a href="https://developers.google.com/speed/public-dns/cache">https://developers.google.com/speed/public-dns/cache</a></p><p>用处：刷新一个域名的DNS缓存，解决更改域名服务器或者DNS记录等很久都没有生效，Netlify部署很有用（可以解决证书要等很久）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/google-flush-cache.png" alt=""></p><h3 id="HTML5-UP">HTML5 UP</h3><p>语言：英</p><p>网址：<a href="https://html5up.net/">https://html5up.net/</a></p><p>用处：各种HTML网页模板，我发现<a href="https://www.lhkstudio.me/">Linhk1606的个人主页</a>就是用这里面的模板</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/html5up.png" alt=""></p><h3 id="YAML-Validator">YAML Validator</h3><p>语言：英</p><p>网址：<a href="https://yamlvalidator.com/">https://yamlvalidator.com/</a></p><p>用处：可以把YAML复制进去检查有没有问题，之前友链页总是报YAML缩进错误，找到这个网站之后复制进去立马解决了</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/yaml-validator.png" alt=""></p><h3 id="Preloaders-net"><a href="http://Preloaders.net">Preloaders.net</a></h3><p>语言：英</p><p>网址：<a href="https://preloaders.net/">https://preloaders.net/</a></p><p>用处：生成加载中图片</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/preloader.net.png" alt=""></p><h3 id="WallpaperHub">WallpaperHub</h3><p>语言：英</p><p>网址：<a href="https://wallpaperhub.app/">https://wallpaperhub.app/</a></p><p>用处：很多好看的图片、壁纸（Microsoft 每日一图）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/wallpaperhub.png" alt=""></p><h3 id="Image-Resizer">Image Resizer</h3><p>语言：英</p><p>网址：<a href="https://imageresizer.com/">https://imageresizer.com/</a></p><p>用处：调整图片的大小</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/image-resizer.png" alt=""></p><h3 id="CloudConvert">CloudConvert</h3><p>语言：英</p><p>网址：<a href="https://cloudconvert.com/">https://cloudconvert.com/</a></p><p>用处：转换各种文件，超级好用！！！</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/cloudconvert.png" alt=""></p><h3 id="loading-io"><a href="http://loading.io">loading.io</a></h3><p>语言：英</p><p>网址：<a href="https://loading.io/">https://loading.io/</a></p><p>用处：生成加载中图片</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/loading.io.png" alt=""></p><h3 id="iLoveIMG">iLoveIMG</h3><p>语言：支持 中 英</p><p>网址：<a href="https://www.iloveimg.com/">https://www.iloveimg.com/</a></p><p>用处：各种图片相关工具，炒鸡好用，特别是有GIF工具！</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/iloveimg.png" alt=""></p><h3 id="PNG-or-JPG-to-SVG">PNG or JPG to SVG</h3><p>语言：英</p><p>网址：<a href="https://www.pngtosvg.com/">https://www.pngtosvg.com/</a></p><p>用处：把PNG或JPG图片转换成真正的SVG，不是Base64！（复杂图片难免会失真）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/pngtosvg.png" alt=""></p><h3 id="爱站网">爱站网</h3><p>语言：中</p><p>网址：<a href="https://www.aizhan.com/">https://www.aizhan.com/</a></p><p>用处：各种关于网站、SEO的工具，好用！</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/aizhan.png" alt=""></p><h3 id="Unicode字符百科">Unicode字符百科</h3><p>语言：支持 中 英</p><p>网址：<a href="https://unicode-table.com/cn/">https://unicode-table.com/cn/</a></p><p>用处：可以查到所有Unicode字符<s>虽然广告有点多</s></p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/unicode-table.png" alt=""></p><h3 id="web-dev">web.dev</h3><p>语言：英</p><p>网址：<a href="https://web.dev/">https://web.dev/</a></p><p>用处：借助来自web.dev的指导和分析，在您自己的站点和应用程序上获得Web的现代化功能。</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/web.dev.png" alt=""></p><h3 id="Cleanmock">Cleanmock</h3><p>语言：英</p><p>网址：<a href="https://cleanmock.com/">https://cleanmock.com/</a></p><p>用处：简介样机图片生成器</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/cleanmock.png" alt=""></p><h3 id="Bigjpg">Bigjpg</h3><p>语言：支持 中 英</p><p>网址：<a href="https://bigjpg.com/">https://bigjpg.com/</a></p><p>用处：AI人工智能<strong>无损</strong>图片放大，使用人工智能深度卷积神经网络</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/bigjpg.png" alt=""></p><h3 id="MDN-Web-文档">MDN Web 文档</h3><p>语言：支持 中 英</p><p>网址：<a href="https://developer.mozilla.org/">https://developer.mozilla.org/</a></p><p>用处：学习Web开发的最佳实践</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/mdnwebdocs.png" alt=""></p><h3 id="Squoosh">Squoosh</h3><p>语言：英</p><p>网址：<a href="https://squoosh.app/">https://squoosh.app/</a></p><p>用处：开源图像压缩网站</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/squoosh.png" alt=""></p><h2 id="软件">软件</h2><h3 id="WebStorm">WebStorm</h3><p>语言：英</p><p>网址：<a href="https://www.jetbrains.com/webstorm/">https://www.jetbrains.com/webstorm/</a></p><p>用处：好用的前端IDE（打开速度有点慢）</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/webstorm-site.png" alt=""></p><h3 id="Mark-Text">Mark Text</h3><p>语言：英</p><p>网址：<a href="https://marktext.app/">https://marktext.app/</a></p><p>用处：最好用的MarkDown编辑器</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/marktext.png" alt=""></p><h3 id="Typora">Typora</h3><p>语言：支持 中 英</p><p>网址：<a href="https://typora.io/">https://typora.io/</a></p><p>用处：好用的MarkDown写作软件</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/typora.io.png" alt=""></p><h3 id="Visual-Studio-Code">Visual Studio Code</h3><p>语言：支持 中 英</p><p>网址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>用处：无所不能的代码编辑器</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/visualstudiocode.png" alt=""></p><h3 id="PotPlayer">PotPlayer</h3><p>语言：支持 中 英</p><p>网址：<a href="http://potplayer.daum.net/">http://potplayer.daum.net/</a></p><p>用处：非常强大的播放器</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img@latest/potplayer.png" alt=""></p><h3 id="Imagine">Imagine</h3><p>语言：支持 中 英</p><p>网址：<a href="https://github.com/meowtec/Imagine">https://github.com/meowtec/Imagine</a></p><p>用处：用于压缩PNG和JPEG的桌面应用程序</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">收集了很久的实用网站和我常用的Windows好用软件推荐（持续更新）</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="Windows" scheme="https://blog.flesx.cn/categories/Dev/Windows/"/>
    
    
    <category term="Windows" scheme="https://blog.flesx.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>LeanCloud流控问题解决方法</title>
    <link href="https://blog.flesx.cn/posts/25909.html"/>
    <id>https://blog.flesx.cn/posts/25909.html</id>
    <published>2020-05-17T02:22:02.000Z</published>
    <updated>2020-05-17T02:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近好多人遇到了 &quot;因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠&quot;。我也遇到了这种问题，太难受了。难道白嫖结束了？<img  class="inline" src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/22/097cd88f446efae87cb27de38c5eed15.png" alt>﻿﻿﻿</p><p>但我还是不甘心，于是只能找其他办法。</p><p>首先看到官方所说：</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/690052ad1e12bd97d8459f6533fcc64b.png" alt=""></p><p>既然是同一时刻，那么是不是意味着只要错开时间就可以了呢？</p><p>我便调整时间尝试了几天，前几天还好，但以后便又出现了流控导致的失败。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/c8a4f0d2c05048eff1ce5d43b7dfd6b1.png" alt=""></p><p><strong>因此，调整时间避免的方案治标不治本。还需找其他方法。</strong></p><h2 id="目前方案">目前方案</h2><ol><li><p>修改定时任务的唤醒时间</p><p>这个方案在上边我已经介绍过了，治标不治本。这里我并不推荐。</p></li><li><p>在博客多加入一条请求。</p><p>也就说每一次访问博客时，将 LeanCloud 唤醒。这种方法可以，这也是我最先想到的，但无疑，这会在一定程度上拖慢博客加载速度。</p></li><li><p>第二个方案的变种</p><p>为什么说是变种？因为也是加一个请求，只不过不会在你博客加，那么加在哪里呢？请继续往后看。</p></li></ol><h2 id="优雅解决">优雅解决</h2><p>解决方案其实真的还蛮多的。因为方案很多，我也不可能每种方案都写一篇详细的小白教程，因此发现或者想到新方案后，我会将思路分享给大家。至于具体如何操作，请自己动手，详细过程不可能再会给出教程 (<em>特别繁琐除外</em>)，本文只会给出一些关键性的代码（脚本），以及代码（脚本）如何使用。</p><p><strong>此篇文章详细介绍方案一的做法，其他方案为作者 2020 年 05 月 18 日后补方案</strong></p><p>LeanCloud 的机器唤醒其实还有一种方式。详情请看<a href="https://leancloud.cn/docs/leanengine_plan.html#hash633315134">休眠策略</a>。</p><blockquote><ul><li>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。</li><li>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是 5 ~ 30 秒（视实例启动时间而定），后续访问响应速度恢复正常。</li><li>强制休眠：如果最近 24 小时内累计运行超过 18 小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 <strong>云引擎 &gt; 统计</strong> 中查看。</li></ul></blockquote><p>那么我们只要每三十分钟之内在外部访问一次不就可以解决了么？<img  class="inline" src="https://cdn.jsdelivr.net/gh/blogimg/emotion/aru/40.png" alt></p><h3 id="开始尝试">开始尝试</h3><p>这里使用的是 GitHub Actions。是不是很熟悉，自动部署也是这个方案呢。</p><ol><li><p>打开 GitHub，鼠标放在右上角，选择 Settings</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png" alt=""></p></li><li><p>点击 <code>Developer settings</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png" alt=""></p></li><li><p>选择 <code>Personal access tokens</code>，添加一个新的 TOKEN。</p><p>这个 TOKEN 主要使用来启动 Actions 和上传结果用的。</p><p>名字<strong>一定要</strong>设置为 <code>GITHUB_TOKEN</code> , 然后勾选 repo , admin:repo_hook , workflow 等选项，最后点击 Generate token 就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png" alt=""></p></li><li><p>接下来 Fork 项目。</p><p>地址：<a href="https://github.com/blogimg/WakeLeanCloud">https://github.com/blogimg/WakeLeanCloud</a></p></li><li><p>成功 Fork 后，进入项目的设置。添加你的 LeanCloud 的后台地址（也就是评论管理的地址）</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/d15b1fffb681f0dd3b9264ea878bf055.png" alt=""></p><p>选择 Secrets，添加你的后台地址</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/6c2cd1845116e3d4e4147157d334be19.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/caed66e8408e5a0c91fe446951180f8d.png" alt=""></p><p><strong>其中 Name 的名字必须为 <code>SITE</code>，Value 可以是多个地址，用英文逗号分隔。不要用中文逗号，不要用中文逗号，不要用中文逗号</strong></p></li><li><p>切换到 Actions 选项卡，点击 I understand my workflows, go ahead and run them</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/run_workflows.png" alt=""></p></li><li><p>接下来对自己的项目点个 Star 就能启动了，启动后请切换到 Actions，看看是否运行成功。</p><ul><li><p>成功</p><p>那么你就可以关掉了，默认是每天 8:00-24:00 时每 20 分钟运行一次。(GitHub 时间稍有延迟，大概 2-5 分钟。)</p></li><li><p>失败</p><p>请认真看本教程。</p></li></ul><blockquote><p>自己点自己的项目是手动执行一次 Actions。是为了测试才设计这个功能的哦！</p><p>并不是不点星这个 Actions 就不会运行。</p></blockquote></li><li><p>如果觉得好用，可以给<a href="https://www.antmoe.com">作者</a>点个 star 哦！</p></li></ol><h2 id="其他解决方案">其他解决方案</h2><p>这里为作者 <span class="inline-tag grey">2020-05-18</span> 之后补充的其他方案。</p><h3 id="方案二">方案二</h3><p>利用国内的云函数，自己写一个脚本。然后定时监控即可。</p><p>或者宝塔、自己服务器的定时任务都是可以的。</p><h3 id="方案三">方案三</h3><p><code>cloudflare</code> 的 <code>Workers</code> 可以在线定义脚本，通过链接即可触发脚本。</p><p>因此定义好自己的脚本后，通过监控即可触发来实现唤醒 LeanCloud</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">&#x27;fetch&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> event.respondWith(handleRequest(event.request));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleRequest = <span class="keyword">async</span> (request) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> render = <span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;唤醒你的LeanCloud&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;<span class="subst">$&#123;body&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;`</span>.trim(), &#123;</span><br><span class="line">            status: <span class="number">200</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=utf-8&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = date.getHours();</span><br><span class="line">    <span class="keyword">var</span> minutes = date.getMinutes;</span><br><span class="line">    <span class="comment">// 事件控制，因此事件采用utc时间，因此需要手动-8</span></span><br><span class="line">    <span class="keyword">if</span> (hour &gt;= <span class="number">0</span> &amp;&amp; hour &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">        <span class="comment">// 列表里添加你的评论管理后台地址</span></span><br><span class="line">        <span class="keyword">const</span> Urls = [<span class="string">&#x27;https://www.antmoe.com/&#x27;</span>,<span class="string">&#x27;https://www.tzki.cn/&#x27;</span>]</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;Urls.length;i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(Urls[i]);</span><br><span class="line">            <span class="keyword">const</span> html = <span class="keyword">await</span> response.status;</span><br><span class="line">            result+=Urls[i]+ <span class="string">&quot;状态：&quot;</span>+html+<span class="string">&#x27;&lt;br /&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> render(<span class="string">`</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;result&#125;</span>&lt;br /&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> render(<span class="string">`当前是休息时间哦！&lt;br /&gt;`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监控平台：<a href="https://uptimerobot.com/">https://uptimerobot.com/</a> 监控地址就是 Workers 的地址。监控频率看你自己。</p><p>另外网友 <a href="https://crosschannel.cc/">track13</a> 评论到：其实只外部要唤醒一次就可以，之后都可以交给 leancloud 的定时任务。</p><h3 id="方案四">方案四</h3><p>通过 <code>cron-job</code> 平台进行监控。注册地址：<a href="https://cron-job.org/en/signup/">https://cron-job.org/en/signup/</a></p><ol><li><p>注册</p><p><strong>时区请选择 <code>Asia/Shanghai</code>，否则请手动下边的操作请手动换算时间。另外关于最下边的谷歌验证如果出不来，请采用特殊方式。这里不过多介绍。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/980e07f7e4c82e8c1c1bf7d76e917270.png" alt=""></p></li><li><p>登录账号</p><p>首先去邮箱激活一下账号哦！<em>邮件可能在垃圾箱哦！</em></p></li><li><p>添加任务</p><p>登陆之后依次点击 <code>Members</code>,<code>cronjobs</code>,<code>Create cronjob</code></p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/94f15877483ab13d9e07e673720b5eba.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/3a79c54ac105dea310e1dd7eceee9fd9.png" alt=""></p></li><li><p>各项配置的解释</p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">简单解释</th><th style="text-align:center">补充说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Title</code></td><td style="text-align:center">任务名称</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>Address</code></td><td style="text-align:center">监控地址</td><td style="text-align:center">Leancloud 的 <code>Web 主机域名</code>，也就是环境变量的 <code>ADMIN_URL</code></td></tr><tr><td style="text-align:center"><code>Schedule</code></td><td style="text-align:center">任务周期</td><td style="text-align:center">分别为每 X 分钟执行、每天 H:MM 执行、每月 DD 日 HH:MM 执行、自定义</td></tr><tr><td style="text-align:center"><code>Notifications</code></td><td style="text-align:center">提醒通知</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>Save responses</code></td><td style="text-align:center">保存日志</td><td style="text-align:center"></td></tr></tbody></table></li><li><p>配置示例</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/c0a1b9cf1a254e624cb8adb0be2581e1.png" alt=""></p><p>关于自定义时间，你勾哪个就会在哪个时间段执行。例如五个框里你全选了，那么会每分钟都会执行。因此请各位博主自己想好需要在哪个时间段唤醒，而不是无脑复制。</p><blockquote><p>点下第一个，在按住 <code>shift</code> 点最后一个，会权限所有哦！另外 <code>ctrl</code> 可以多选</p></blockquote></li></ol><h2 id="问题">问题</h2><ol><li><p>修改频率（时间）</p><p>修改<code>.github/workflows/autoWakeup.yml</code> 文件中的 <code>cron</code> 表达式即可。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/19/0b1cc831b7f0fb7779c11bb29288da98.png" alt=""></p></li><li><p>后台地址会不会暴露</p><p>不会的</p></li><li><p>没有效果</p><p>请确保你的第五步成功添加了网址，如果没有添加也会定时执行 Actions 的动作而不会报错。可以在详情里查看是否监控的你的地址。正常情况下会如下图所以，多个网址会依次排列。如果没有填写网址则会默认访问作者的博客。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/a240386ca356e2b2a5534b4db40531ec.png" alt=""></p></li><li><p>每次都会 commit，太多了。</p><p>其实可以每天只运行一次，然后其他时间还是依靠定时函数来完成。例如我将 actions 的时间修改为每天早上 8:00 运行一次。而其他时间通过定时函数唤醒。这样<strong>理论上</strong>也是没问题的。</p><blockquote><p>Actions 的时间是按 UTC 时间计算的，因此设置时请手动将时间换算成 UTC 时间哦！</p></blockquote></li></ol><h2 id="最后">最后</h2><p>Enjoy！</p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>文章头图来自 <a href="https://icons8.com/">Icons8</a></p><p>本文转载自<a href="https://www.antmoe.com/">小康博客</a>，有改动和添加</p><p>原文链接：<a href="https://www.antmoe.com/posts/ff6aef7b/">https://www.antmoe.com/posts/ff6aef7b/</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">LeanCloud提示因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠的解决方法</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="LeanCloud" scheme="https://blog.flesx.cn/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>博客出现的Bug及解决方法</title>
    <link href="https://blog.flesx.cn/posts/28146.html"/>
    <id>https://blog.flesx.cn/posts/28146.html</id>
    <published>2020-05-01T08:51:25.000Z</published>
    <updated>2020-05-02T22:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nunjucks-Error-Unable-to-call-now">Nunjucks Error: Unable to call `now`</h2><p>之前文章里有一段含有 <code>{{ }} now()</code>﻿﻿﻿</p><p>然后 <code>hexo s</code> 报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nunjucks Error:  [Line 84, Column 43] Error: Unable to call `now`, <span class="built_in">which</span> is undefined or falsey</span><br></pre></td></tr></table></figure><p>因为 Hexo 是使用 Nunjucks 解析的，Hexo 会认为 <code>now()</code> 是一个函数，所以会报错</p><p>解决办法：把小括号换成 ASCII <code>&amp;#40;</code> 和 <code>&amp;#41; </code> 就可以了</p><br><p>但是... 还是报错啊！</p><p>报错信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nunjucks Error:  [Line 85, Column 45] expected variable end</span><br></pre></td></tr></table></figure><p>这是怎么回事？</p><p>去 Hexo 文档里查了一下，可以使用Raw标签避免发生解析异常</p><p>试了一下，发现成功了！</p><br><h3 id="解决方法">解决方法</h3><p>使用Raw标签解决</p><p>总结：写文章尽量不要用到两对大括号</p><h2 id="目录显示异常">目录显示异常</h2><p>文章目录的标题显示异常</p><p>h2标题左边带一个点，没有加粗，h3变成主标题</p><br><h3 id="解决方法-2">解决方法</h3><p>引用主题作者 <a href="https://github.com/xaoxuu/hexo-theme-volantis/issues/266#issuecomment-622967728">@xaoxuu</a> 的回答：</p><p>由图可见异常不仅仅是左边有小圆点，标题的缩进程度也是乱的。建议您先将文章的段落标题层级规范化，不要越级。</p><br><p>也就是说小的标题不能放在大的标题上面</p><p>我这里h3放在h2上面了</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">博客建站以来遇到的Bug及解决的方法，持续更新</summary>
    
    
    
    <category term="Bug" scheme="https://blog.flesx.cn/categories/Bug/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="Bug" scheme="https://blog.flesx.cn/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Hexo完整命令列表</title>
    <link href="https://blog.flesx.cn/posts/5913.html"/>
    <id>https://blog.flesx.cn/posts/5913.html</id>
    <published>2020-05-01T07:50:08.000Z</published>
    <updated>2020-05-01T07:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="init">init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new">new</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--path</code></td><td style="text-align:left">自定义新文章的路径</td></tr><tr><td style="text-align:left"><code>-r</code>, <code>--replace</code></td><td style="text-align:left">如果存在同名文章，将其替换</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--slug</code></td><td style="text-align:left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate">generate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-d</code>, <code>--deploy</code></td><td style="text-align:left">文件生成后立即部署网站</td></tr><tr><td style="text-align:left"><code>-w</code>, <code>--watch</code></td><td style="text-align:left">监视文件变动</td></tr><tr><td style="text-align:left"><code>-b</code>, <code>--bail</code></td><td style="text-align:left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td style="text-align:left"><code>-f</code>, <code>--force</code></td><td style="text-align:left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td style="text-align:left"><code>-c</code>, <code>--concurrency</code></td><td style="text-align:left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="publish">publish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server">server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--port</code></td><td style="text-align:left">重设端口</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--static</code></td><td style="text-align:left">只使用静态文件</td></tr><tr><td style="text-align:left"><code>-l</code>, <code>--log</code></td><td style="text-align:left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy">deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-g</code>, <code>--generate</code></td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="render">render</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-o</code>, <code>--output</code></td><td style="text-align:left">设置输出路径</td></tr></tbody></table><h2 id="migrate">migrate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="clean">clean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list">list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version">version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项">选项</h2><h3 id="安全模式">安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式">调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式">简洁模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径">自定义配置文件的路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿">显示草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD">自定义 CWD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>版权说明</div><div class="blockquote-note__content"><p>本文转载自<a href="https://hexo.io">Hexo官网</a></p><p>原文链接：<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p></div></blockquote>]]></content>
    
    
    <summary type="html">Hexo命令汇集</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/categories/Dev/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.flesx.cn/tags/Hexo/"/>
    
    <category term="Commands" scheme="https://blog.flesx.cn/tags/Commands/"/>
    
  </entry>
  
  <entry>
    <title>使用Coding Pages搭建免费Hexo博客（2）</title>
    <link href="https://blog.flesx.cn/posts/7578.html"/>
    <id>https://blog.flesx.cn/posts/7578.html</id>
    <published>2020-05-01T07:26:38.000Z</published>
    <updated>2020-06-12T07:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>﻿﻿﻿</p><p><em>抱歉，截图不小心被我删了，本文图片已删除</em></p><hr><h2 id="Coding-配置">Coding 配置</h2><p><strong>Coding Pages需要实名认证，可以用支付宝认证</strong></p><p><a href="https://coding.net">Coding官网网址</a></p><h3 id="注册">注册</h3><p>进入Coding官网</p><p>点击免费注册，出现这个界面</p><p>输入团队名称、登陆地址，勾选我已阅读并同意Coding服务协议，点击下一步</p><p>然后输入姓名、手机号、密码、邮箱（推荐使用常用邮箱）</p><p>点获取验证码</p><p>输入验证码后点击完成注册</p><p>然后登录...（后面忘记了，我没有第二个手机号可以注册）</p><p>注册成功后是这个亚子（我已经创建好博客了），默认有一个示例项目</p><h3 id="创建项目">创建项目</h3><p>点全部项目</p><p>点击新建项目</p><p>这里一定要选择 DevOps（我之前选代码托管项目，里面没有静态网站这个选项）</p><p>只需要填写项目名称，点击创建项目会自动填写项目标识</p><p>一定勾选上启用 <a href="http://README.md">README.md</a> 初始化项目，要不然不能创建静态网站（等一下 Hexo <a href="http://xn--README-9o7ia26vxbu4o87iq49dkdhjrfvr7e.md">上传上来的时候会删掉README.md</a>，如果你想启用，等一下会说）</p><h3 id="创建网站">创建网站</h3><p>这是项目界面</p><p>点击持续部署 -&gt; 静态网站，点击立即创建静态网站</p><p>填写网站名称就可以了</p><p><em>Coding会给你随机生成一个二级域名，支持绑定自定义域名</em></p><p>点击右上角设置</p><p>划到下面，开启强制 HTTPS</p><p>这样就创建好你的网站了！</p><h2 id="部署">部署</h2><h3 id="引用官方介绍：">引用官方介绍：</h3><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>简写为 <code>hexo d</code></p><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">heroku</span></span><br><span class="line">    <span class="attr">repo:</span></span><br></pre></td></tr></table></figure><p>有关更多部署插件，请参阅 <a href="https://hexo.io/Plugins/">插件</a> 列表。</p><blockquote class="blockquote-note blockquote-note__warning"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></div>缩进</div><div class="blockquote-note__content"><p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p></div></blockquote><h4 id="Git">Git</h4><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li>修改配置。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认</th></tr></thead><tbody><tr><td style="text-align:left"><code>repo</code></td><td style="text-align:left">库（Repository）地址</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>branch</code></td><td style="text-align:left">分支名称</td><td style="text-align:left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (<a href="http://Coding.net">Coding.net</a>) <code>master</code> (others)</td></tr><tr><td style="text-align:left"><code>message</code></td><td style="text-align:left">自定义提交信息</td><td style="text-align:left"><code>Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}</code></td></tr><tr><td style="text-align:left"><code>token</code></td><td style="text-align:left">要通过repo进行身份验证的可选令牌值。前缀为 <code>$</code> 以从环境变量中读取token</td><td style="text-align:left">无</td></tr></tbody></table><ol><li><p>生成站点文件并推送至远程库。执行<code>hexo clean &amp;&amp; hexo deploy</code>。</p></li><li><p>登入 GitHub/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为<code>_config.yml</code>配置中的分支名称。稍等片刻，您的站点就会显示在您的GitHub Pages中。</p></li></ol><h6 id="这一切是如何发生的？">这一切是如何发生的？</h6><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>For 使用 Git 管理站点目录的用户</div><div class="blockquote-note__content"><p>由于 Hexo 的部署默认使用分支 <code>master</code>，所以如果你同时正在使用 Git 管理你的站点目录，你应当注意你的部署分支应当不同于写作分支。<br>一个好的实践是将站点目录和 Pages 分别存放在两个不同的 Git 仓库中，可以有效避免相互覆盖。<br>Hexo 在部署你的站点生成的文件时并不会更新你的站点目录。因此你应该手动提交并推送你的写作分支。</p></div></blockquote><br><p>Coding部署使用Git。</p><p>回到上篇</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment 部署</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">branch:</span></span><br></pre></td></tr></table></figure><p><code>type</code> 填 Git</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure><p>下一项：  <code>repo</code></p><p>打开项目</p><p>选择SSH，然后点击右边的复制按钮</p><p>把复制下来的东西粘贴到 <code>repo</code> 那里</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repo:</span> <span class="string">git@e.coding.net:&lt;your-username&gt;/&lt;your-repo&gt;.git</span></span><br></pre></td></tr></table></figure><br><p>下一步：打开命令行，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;&lt;your-email&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><code>&lt;your-email&gt;</code> 替换成你的邮箱（其实也不一定要替换成邮箱，替换成你想要的东西都可以，-C 参数是备注，即 comment）</p><p>会显示这些：</p><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/you/.ssh/id_rsa):</p><p>直接回车，然后又出现</p><p>Enter passphrase (empty for no passphrase): [Type a passphrase]<br>Enter same passphrase again: [Type passphrase again]</p><p>连续回车两次，终于成功：</p><p>Your identification has been saved in /home/you/.ssh/id_rsa.<br>Your public key has been saved in /home/you/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>此处是密钥内容  你的邮箱</p><br><p>打开你的个人文件夹，里面多了一个 <code>.ssh</code> 文件夹</p><p>用记事本打开里面的 <code>id_rsa.pub</code></p><p>里面的内容是以 <code>ssh-rsa</code> 开头，以 你的邮箱 结尾</p><p>按 <kbd>Ctrl+A</kbd> <kbd>Ctrl+C</kbd> 复制里面的内容</p><br><p>回到浏览器里，打开你的项目</p><p>划到项目页面右上角头像上面，点击个人设置</p><p>点击左边SSH公钥，点新增公钥</p><p>把复制下来的内容粘贴到公钥内容里面，勾选永久有效，点击添加</p><p>添加成功！</p><p>然后在命令行里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@e.coding.net</span><br></pre></td></tr></table></figure><p>如果出现这些东东，就说明配置成功了</p><p>Coding 提示: Hello Flexiston, You've connected to <a href="http://Coding.net">Coding.net</a> via SSH. This is a personal key.<br>Flexiston，你好，你已经通过 SSH 协议认证 <a href="http://Coding.net">Coding.net</a> 服务，这是一个个人公钥.<br>公钥指纹：你的公钥指纹</p><br><p>再下一项：<code>branch</code> 分支，填写 <code>master</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>完整的 deploy 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment 部署</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@e.coding.net:&lt;your-username&gt;/&lt;your-repo&gt;.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><code>token</code> 没必要配置</p><br><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>就把你的博客推送到Coding上面去了</p><p>访问Coding给你的网址，就可以看到你的Blog啦！</p><h2 id="更换主题">更换主题</h2><p>如果要更换主题的话...</p><p>先到<a href="https://hexo.io/themes">官网</a>找一款你喜欢的主题，有304款主题，一定有你喜欢的</p><p>比如我用的是 <a href="https://github.com/xaoxuu/hexo-theme-volantis">Volantis</a></p><p>在根目录_config.yml里把 <code>theme: landscape</code> 换成你要用的主题名称，然后按照主题文档配置就可以了</p><p><a href="https://volantis.js.org">Volantis文档</a></p><br><p><strong>本文会持续更新，目前就暂时到这里了，如果有疑问、没讲准确等等问题，欢迎留言告诉我哦</strong></p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">在本地使用Coding Pages搭建免费Hexo博客（第二章）</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/categories/Dev/Hexo/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/tags/Hexo/"/>
    
    <category term="Coding-Pages" scheme="https://blog.flesx.cn/tags/Coding-Pages/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions实现自动关闭不遵循模板的issue</title>
    <link href="https://blog.flesx.cn/posts/49939.html"/>
    <id>https://blog.flesx.cn/posts/49939.html</id>
    <published>2020-04-30T09:19:19.000Z</published>
    <updated>2020-04-30T09:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>﻿﻿﻿</p><p><em>抱歉，截图不小心被我删了，本文图片已删除</em></p><hr><h2 id="Volantis仓库">Volantis仓库</h2><p>今天在看Volantis的GitHub仓库issue的时候，发现没有遵循模板的issue会被一个叫“GitHub Actions”的机器人自动关闭</p><p><img src="https://cdn.jsdelivr.net/gh/Flexiston/post-img/github-volantis-closed-issue.png" alt=""></p><p>还会自动添加 [🙁 Not following issue template] 的label</p><p>在上面导航栏发现了 <i class="fas fa-play-circle"></i>Actions 的图标，点开出现了这个</p><p>左边workflow有一个auto close issues</p><br><p>然后在根目录 /.github/workflows 里面发现了 auto-close-issues.yml</p><p>看了一遍之后，大致了解了含义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">auto</span> <span class="string">close</span> <span class="string">issues</span> <span class="comment"># Action名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">issues:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">opened</span>, <span class="string">edited</span>] <span class="comment"># 当新issue的状态为开启、已编辑时，执行Action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># 工作</span></span><br><span class="line">  <span class="attr">auto_close_issues:</span> <span class="comment"># 自动关闭issue</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 这个不太懂... （好像是运行在Ubuntu最新版本）</span></span><br><span class="line">    <span class="attr">steps:</span> <span class="comment"># 步骤</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Automatically</span> <span class="string">close</span> <span class="string">issues</span> <span class="string">that</span> <span class="string">don&#x27;t</span> <span class="string">follow</span> <span class="string">the</span> <span class="string">issue</span> <span class="string">template</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lucasbento/auto-close-issues@v1.0.2</span> <span class="comment"># 这个就是自动关闭issue的Action</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github-token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># GitHub Token</span></span><br><span class="line">          <span class="attr">issue-close-message:</span> <span class="string">&quot;@$&#123;issue.user.login&#125;: hello! :wave:\n\nThis issue is being automatically closed because it does not follow the issue template.&quot;</span> <span class="comment"># optional property # 关闭issue的信息</span></span><br><span class="line">          <span class="attr">closed-issues-label:</span> <span class="string">&quot;🙁 Not following issue template&quot;</span> <span class="comment"># 给被关闭的issue添加的标签</span></span><br></pre></td></tr></table></figure><h3 id="auto-close-issues的README：">auto-close-issues的README：</h3><h4 id="关闭不遵循问题模板的问题">关闭不遵循问题模板的问题</h4><h5 id="怎么运行的">怎么运行的</h5><p>GitHub Actions将获取其中的所有文件<code>.github/ISSUE_TEMPLATE</code>，解析标题并将这些标题与已打开/编辑的issue的内容进行比较，如果不匹配，它将：</p><ol><li><p>为issue添加标签（可使用input属性配置 <code>closed-issues-label</code>)；</p><blockquote><p>如果未提供标签，则此步骤将不会运行。</p></blockquote></li><li><p>向issue添加消息；</p></li><li><p>关闭它。</p></li></ol><p>如果用户碰巧编辑了issue以匹配模板，则该操作将再次运行；如果匹配，它将删除标签并自动重新打开问题。</p><blockquote><p>仅当您提供了input属性时，这才起作用<code>closed-issues-label</code>。</p></blockquote><h5 id="安装">安装</h5><p>将以下内容放入<code>.github/workflows/main.yml</code>文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">on:</span><br><span class="line">  issues:</span><br><span class="line">    types: [opened, edited]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  auto_close_issues:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions&#x2F;checkout@v1</span><br><span class="line">      - name: Automatically close issues that don&#39;t follow the issue template</span><br><span class="line">        uses: lucasbento&#x2F;auto-close-issues@v1.0.2</span><br><span class="line">        with:</span><br><span class="line">          github-token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">          issue-close-message: &quot;@$&#123;issue.user.login&#125;: hello! :wave:\n\nThis issue is being automatically closed because it does not follow the issue template.&quot; # optional property</span><br><span class="line">          closed-issues-label: &quot;🙁 Not following issue template&quot; # optional property</span><br></pre></td></tr></table></figure><h5 id="配置">配置</h5><p>您可以配置<code>issue-close-message</code>和<code>closed-issues-label</code>，分别是关闭问题时显示的消息和关闭问题时添加到问题的标签。</p><p>对于用于提及用户名<code>issue-close-message</code>的示例配置<code>issue.user.login</code>，您可以检查可以在<a href="https://developer.github.com/v3/activity/events/types/#webhook-payload-example-15">GitHub webhook文档</a>上的消息上指定的<a href="https://developer.github.com/v3/activity/events/types/#webhook-payload-example-15">内容</a>。</p><h5 id="License">License</h5><p>该项目是根据MIT许可发布的。</p><p><br><br></p><p>就按照这个配置就可以了（好像还蛮简单的），如果想了解GitHub Actions的更多功能，可以去看<a href="https://help.github.com/en/actions">官方文档</a></p><p>PS：GitHub Actions听说还有更多强大的功能哦！</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">使用GitHub Actions轻松实现自动关闭没有遵循模板的issue</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="GitHub" scheme="https://blog.flesx.cn/categories/Dev/GitHub/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="GitHub" scheme="https://blog.flesx.cn/tags/GitHub/"/>
    
    <category term="issues" scheme="https://blog.flesx.cn/tags/issues/"/>
    
  </entry>
  
  <entry>
    <title>使用Coding Pages搭建免费Hexo博客（1）</title>
    <link href="https://blog.flesx.cn/posts/22938.html"/>
    <id>https://blog.flesx.cn/posts/22938.html</id>
    <published>2020-04-26T12:43:04.000Z</published>
    <updated>2020-04-26T12:43:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>﻿﻿﻿<br><em>抱歉，截图不小心被我删了，本文图片已删除</em></p><hr><p><s><strong>本站就是使用 Coding Pages 搭建的</strong></s><strong>现在已经换成 Vercel</strong></p><p><strong>本教程系统环境为 Windows 10，Mac 搭建过程是基本相同的</strong></p><p><strong>如果我的步骤不行，大家可以查看<a href="https://hexo.io">官方文档</a>或百度 Google</strong></p><p><a href="https://hexo.io/">Hexo官网</a></p><h2 id="Hexo介绍（官网介绍）">Hexo介绍（官网介绍）</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><br><h2 id="准备工作">准备工作</h2><p>搭建博客前的准备工作</p><h3 id="安装-Git">安装 Git</h3><p>Mac 系统一般已经预装了 Git，可以跳过此步骤</p><ul><li><p>Windows：看下文</p></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><blockquote class="blockquote-note blockquote-note__warning"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></div>Mac 用户</div><div class="blockquote-note__content"><p>如果在编译时遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></div></blockquote><h4 id="下载">下载</h4><p><a href="%5Bhttps://gitforwindows.org/%5D">Git官网</a></p><p>等待下载完成（漫长的等待......）</p><h4 id="安装">安装</h4><p>直接点击 Install 就可以了</p><p>安装完成之后桌面右键，出现 Git Bash Here 就说明安装成功了</p><h3 id="安装-Node-js">安装 Node.js</h3><p><a href="https://nodejs.org/">Node.js官网</a></p><p>目前Node稳定版本为12.16.2</p><p>点击下载，安装一路默认就可以了</p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>Windows 用户</div><div class="blockquote-note__content"><p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></div></blockquote><blockquote class="blockquote-note blockquote-note__warning"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></div>For Mac / Linux 用户</div><div class="blockquote-note__content"><p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p></div></blockquote><h3 id="安装-Hexo">安装 Hexo</h3><p>打开命令行</p><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>这样就安装好Hexo了</p><h2 id="创建博客">创建博客</h2><p>打开命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;your-blog-name&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;your-blog-name&gt;</code> 是你的博客名称</p><h3 id="文件夹、文件用处（官网介绍）">文件夹、文件用处（<strong>官网介绍</strong>）</h3><h4 id="config-yml">_config.yml</h4><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h4 id="package-json">package.json</h4><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^3.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^0.1.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^0.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^0.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^0.3.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scaffolds">scaffolds</h4><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h4 id="source">source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h4 id="themes">themes</h4><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><p>然后打开生成好的博客文件夹，开始配置。</p><h3 id="配置-config-yml">配置 _config.yml</h3><p>配置 Hexo 根目录 _config.yml</p><p><strong>_config.yml采用Yaml格式配置</strong></p><h4 id="目前-config-yml文件内容如下（部分注释来自官网）：">目前_config.yml文件内容如下（部分注释来自官网）：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration Hexo配置</span></span><br><span class="line"><span class="comment">## Docs 文档: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source 源代码: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 网站</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 介绍（很多主题会解析成个人介绍）</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># 搜索关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span> <span class="comment"># 作者（你的名称）</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> <span class="comment"># 语言（查看你使用的主题有哪些语言）</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 时区（非必要不用配置，默认为电脑时区）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 网址</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27; </span></span><br><span class="line"><span class="comment">## 如果你的站点位于子目录中，请将 url 设置为 &#x27;http://yoursite.com/child&#x27;，将 root 设置为 &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> <span class="comment"># 文章永久链接（举个栗子：你创建了一篇文章post1.md，创建时间为 2020-04-27，那么这篇文章的网址为 &#x27;2020/04/27/post1/&#x27;）</span></span><br><span class="line"><span class="attr">permalink_defaults:</span> <span class="comment"># 永久链接中各部分的默认值</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks # 去掉 index.html</span></span><br><span class="line">  <span class="comment"># 比如有一个页面网址为 http://yoursite.com/foo/bar/index.html，把这一项设置成 false 之后这个页面的网址变成 http://yoursite.com/foo/bar/</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line">  <span class="comment"># 去掉 .html</span></span><br><span class="line">    <span class="comment"># 有一个页面网址为：http://yoursite.com/foo/bar.html 设置成 false 之后：http://yoursite.com/foo/bar/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory 目录</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment"># 资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment"># 公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment"># 归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment"># 分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span> <span class="comment"># Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span> <span class="comment"># 国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="comment"># 跳过渲染</span></span><br><span class="line"><span class="comment"># 匹配到的文件将会被不做改动地复制到 public 目录中。可已使用 glob 表达式来匹配路径（如果需要站点验证，可以设置这个）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 写作</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span> <span class="comment"># 代码高亮</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从这里到下面，这一段不用配置 |</span></span><br><span class="line"><span class="comment">#                         \/</span></span><br><span class="line"><span class="comment"># 如果要配置，参考官方文档</span></span><br><span class="line"><span class="comment"># (https://hexo.io/zh-cn/docs/configuration/#分类-amp-标签)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## Use post&#x27;s date for updated date unless set in front-matter</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#       /\</span></span><br><span class="line"><span class="comment"># 到这里 |</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span> <span class="comment"># Hexo 默认会忽略隐藏文件和文件夹</span></span><br><span class="line"><span class="comment">#（包括名称以下划线（_）和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）</span></span><br><span class="line"><span class="comment"># 通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span></span><br><span class="line"><span class="attr">exclude:</span> <span class="comment"># Hexo 会忽略这些文件和目录</span></span><br><span class="line"><span class="attr">ignore:</span> <span class="comment"># Hexo 会忽略这些文件和目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span> <span class="comment"># 设置主题（默认安装landscape，更多主题查看官网：https://hexo.io/themes）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 部署（参考下篇）</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="本地调试">本地调试</h2><p>在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>可以开启本地调试，默认端口为4000，可以使用 <code>-p</code>， <code>--port</code> 重设端口</p><p>在浏览器输入 <code>localhost:4000</code> 就可以看到你的网站啦！</p><p>以后如果想在本地看看效果就可以使用 <code>hexo s</code></p><p>PS：404页面会替换成 <code>cannot found 你访问的页面</code>，如果要查看404页面的话，输入<code>localhost:4000/404.html</code> 就可以啦</p><p>（￣‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‍‌‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‍‍‍‍​‌​‌‍​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‌‍‍‌‍​‍‌‍‌​‍‍‍​‍‍​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‌‍‌​‌‍‌‌​‌​‍‌‌‍​‌‌​‌‌‌​‍​‍‍‍​‍‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‍‌‌‌​‌​‍‌‍‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌‌‍‌​‌‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‍‍‍‍​‍‍‍‍‍​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‌‍​‍‍‍‍‍​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‍‍‍‍​‍‍‍‍‍​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‌‌‌​‍‍‍‍‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‌​‌‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌​‍‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‌‌‍‍​‍‌‌‌​‍‌‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‍‌​‍‌‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌‌​‌‌‌‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‌‌‌​‍‌‌‌​‌‌‌‌‌​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‌‌‌‌‌​‍‍‍‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‍‌‌‌​‌‌‌‌‌​‍‍‌‌‌​‌‍‍‌‍​‌‌‍​‌‌‌‌‍​‌​‌‌‌‍‍​‌‍​‌‍‍‌‍​‌‌‍​‍‌‌‌‌​‍‍‌‌‌​‌‌‍‍‍​‌‍​‌‍‍‌‍​‌‌‍​‌‌‌‌‌​‌‍‍‍‍​‌‌‌‌‍​‌‍‍‍‍​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‍‌‌‌​‍‌‌‌​‍‍‍‌‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‌‌‌‌​‍‌‍‌​‌‍‍‌‍​‌‌‍​‍‍‍‌‌​‌‌‍‌​‍‍‌‌‌​‍‌‌︶￣）↗</p>]]></content>
    
    
    <summary type="html">在本地使用Coding Pages搭建免费Hexo博客（第一章）</summary>
    
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/categories/Dev/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/categories/Dev/Hexo/"/>
    
    
    <category term="Dev" scheme="https://blog.flesx.cn/tags/Dev/"/>
    
    <category term="Hexo" scheme="https://blog.flesx.cn/tags/Hexo/"/>
    
    <category term="Coding-Pages" scheme="https://blog.flesx.cn/tags/Coding-Pages/"/>
    
  </entry>
  
</feed>
